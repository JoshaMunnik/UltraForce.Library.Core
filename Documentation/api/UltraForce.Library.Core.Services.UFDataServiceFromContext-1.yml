### YamlMime:ManagedReference
items:
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  commentId: T:UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  id: UFDataServiceFromContext`1
  parent: UltraForce.Library.Core.Services
  children:
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.#ctor(`0,System.Boolean)
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.#ctor(`0,`0,System.Boolean)
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.AddAsync``2(``0)
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.CachedContext
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.Changed
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.DetachEntity(System.Object)
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.DetachTrackedEntries
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.Dispose
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.DisposeAsync
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.FindAllAsync``2
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.FindForIdAsync``3(``2)
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.GetPrimaryKeyFromServiceModel``3(``0)
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.GetPrimaryKeyNameFromEntity``1
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.LockAsync
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.MainContext
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.RemoveAsync``2(``0)
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.SaveChangesAsync
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.SwapAsync``1(System.String,System.String,``0,``0,System.String,System.Nullable{System.DateTime})
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.SwapAsync``2(System.String,System.String,``1,``1,System.String,System.Nullable{System.DateTime})
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.TransactionAsync(System.Func{System.Threading.Tasks.Task})
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.TransactionAsync``1(System.Func{System.Threading.Tasks.Task{``0}})
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.UnlockAsync
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.UpdateAsync``2(``0)
  langs:
  - csharp
  - vb
  name: UFDataServiceFromContext<TContext>
  nameWithType: UFDataServiceFromContext<TContext>
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>
  type: Class
  source:
    remote:
      path: UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.Core.git
    id: UFDataServiceFromContext
    path: ../UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
    startLine: 59
  assemblies:
  - UltraForce.Library.Core
  namespace: UltraForce.Library.Core.Services
  summary: >-
    <xref href="UltraForce.Library.Core.Services.UFDataServiceFromContext%601" data-throw-if-not-resolved="false"></xref> is a base class to implement a data

    service using a <xref href="Microsoft.EntityFrameworkCore.DbContext" data-throw-if-not-resolved="false"></xref> to manage underlying entities.

    <p>

    The class implements a locking mechanism to minimize the

    <xref href="Microsoft.EntityFrameworkCore.DbContext.SaveChanges" data-throw-if-not-resolved="false"></xref> calls.

    </p>

    <p>

    The class defines both a <xref href="UltraForce.Library.Core.Services.UFDataServiceFromContext%601.MainContext" data-throw-if-not-resolved="false"></xref> and a <xref href="UltraForce.Library.Core.Services.UFDataServiceFromContext%601.CachedContext" data-throw-if-not-resolved="false"></xref>, to support

    in-memory copies to read from. All protected methods that perform some operation that changes

    the database will use the main context, while all methods that only read data will use the

    cached context.

    </p>
  remarks: Interface definition for the data service should inherit from <xref href="UltraForce.Library.Core.Services.IUFDataService" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: 'public class UFDataServiceFromContext<TContext> : IUFDataService, IDisposable, IAsyncDisposable where TContext : DbContext'
    typeParameters:
    - id: TContext
      description: The database context type
    content.vb: Public Class UFDataServiceFromContext(Of TContext As DbContext) Implements IUFDataService, IDisposable, IAsyncDisposable
  inheritance:
  - System.Object
  implements:
  - UltraForce.Library.Core.Services.IUFDataService
  - System.IDisposable
  - System.IAsyncDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsModelAsync``2
  - UltraForce.Library.Core.Services.UFDataServiceFromContext`1.UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsNullableModelAsync``2
  nameWithType.vb: UFDataServiceFromContext(Of TContext)
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext)
  name.vb: UFDataServiceFromContext(Of TContext)
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.#ctor(`0,System.Boolean)
  commentId: M:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.#ctor(`0,System.Boolean)
  id: '#ctor(`0,System.Boolean)'
  parent: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  langs:
  - csharp
  - vb
  name: UFDataServiceFromContext(TContext, bool)
  nameWithType: UFDataServiceFromContext<TContext>.UFDataServiceFromContext(TContext, bool)
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.UFDataServiceFromContext(TContext, bool)
  type: Constructor
  source:
    remote:
      path: UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.Core.git
    id: .ctor
    path: ../UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
    startLine: 112
  assemblies:
  - UltraForce.Library.Core
  namespace: UltraForce.Library.Core.Services
  summary: Constructs an instance of <xref href="UltraForce.Library.Core.Services.UFDataServiceFromContext%601" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: protected UFDataServiceFromContext(TContext context, bool disableTracking = false)
    parameters:
    - id: context
      type: '{TContext}'
      description: Database context to use for both cached and main operations.
    - id: disableTracking
      type: System.Boolean
      description: >-
        When true tell <xref href="Microsoft.EntityFrameworkCore.DbContext.ChangeTracker" data-throw-if-not-resolved="false"></xref> to stop tracking and reset the state

        of any tracked entry to <xref href="Microsoft.EntityFrameworkCore.EntityState.Detached" data-throw-if-not-resolved="false"></xref> with

        the <xref href="UltraForce.Library.Core.Services.UFDataServiceFromContext%601.SaveChangesAsync" data-throw-if-not-resolved="false"></xref> call.

        <p>

        To disable the tracking everywhere, the method assigns:

        <pre><code class="lang-csharp">{context}.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;</code></pre>

        And disables auto-detect changes with:

        <pre><code class="lang-csharp">{context}.ChangeTracker.AutoDetectChangesEnabled = false;</code></pre>

        </p>
    content.vb: Protected Sub New(context As TContext, disableTracking As Boolean = False)
  overload: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.#ctor*
  nameWithType.vb: UFDataServiceFromContext(Of TContext).New(TContext, Boolean)
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).New(TContext, Boolean)
  name.vb: New(TContext, Boolean)
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.#ctor(`0,`0,System.Boolean)
  commentId: M:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.#ctor(`0,`0,System.Boolean)
  id: '#ctor(`0,`0,System.Boolean)'
  parent: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  langs:
  - csharp
  - vb
  name: UFDataServiceFromContext(TContext, TContext, bool)
  nameWithType: UFDataServiceFromContext<TContext>.UFDataServiceFromContext(TContext, TContext, bool)
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.UFDataServiceFromContext(TContext, TContext, bool)
  type: Constructor
  source:
    remote:
      path: UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.Core.git
    id: .ctor
    path: ../UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
    startLine: 139
  assemblies:
  - UltraForce.Library.Core
  namespace: UltraForce.Library.Core.Services
  summary: Constructs an instance of <xref href="UltraForce.Library.Core.Services.UFDataServiceFromContext%601" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: protected UFDataServiceFromContext(TContext cachedContext, TContext mainContext, bool disableTracking = false)
    parameters:
    - id: cachedContext
      type: '{TContext}'
      description: Database context to use for read operations.
    - id: mainContext
      type: '{TContext}'
      description: Database context to use for read and write operations.
    - id: disableTracking
      type: System.Boolean
      description: >-
        When true tell <xref href="Microsoft.EntityFrameworkCore.DbContext.ChangeTracker" data-throw-if-not-resolved="false"></xref> to stop tracking and reset the state

        of any tracked entry to <xref href="Microsoft.EntityFrameworkCore.EntityState.Detached" data-throw-if-not-resolved="false"></xref> with

        the <xref href="UltraForce.Library.Core.Services.UFDataServiceFromContext%601.SaveChangesAsync" data-throw-if-not-resolved="false"></xref> call.

        <p>

        To disable the tracking everywhere, the method assigns:

        <pre><code class="lang-csharp">{context}.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;</code></pre>

        And disables auto-detect changes with:

        <pre><code class="lang-csharp">{context}.ChangeTracker.AutoDetectChangesEnabled = false;</code></pre>

        </p>
    content.vb: Protected Sub New(cachedContext As TContext, mainContext As TContext, disableTracking As Boolean = False)
  overload: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.#ctor*
  nameWithType.vb: UFDataServiceFromContext(Of TContext).New(TContext, TContext, Boolean)
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).New(TContext, TContext, Boolean)
  name.vb: New(TContext, TContext, Boolean)
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.Dispose
  commentId: M:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.Dispose
  id: Dispose
  parent: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: UFDataServiceFromContext<TContext>.Dispose()
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.Dispose()
  type: Method
  source:
    remote:
      path: UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.Core.git
    id: Dispose
    path: ../UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
    startLine: 165
  assemblies:
  - UltraForce.Library.Core
  namespace: UltraForce.Library.Core.Services
  summary: Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
  example: []
  syntax:
    content: public virtual void Dispose()
    content.vb: Public Overridable Sub Dispose()
  overload: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: UFDataServiceFromContext(Of TContext).Dispose()
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).Dispose()
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.DisposeAsync
  commentId: M:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.DisposeAsync
  id: DisposeAsync
  parent: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  langs:
  - csharp
  - vb
  name: DisposeAsync()
  nameWithType: UFDataServiceFromContext<TContext>.DisposeAsync()
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.DisposeAsync()
  type: Method
  source:
    remote:
      path: UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.Core.git
    id: DisposeAsync
    path: ../UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
    startLine: 173
  assemblies:
  - UltraForce.Library.Core
  namespace: UltraForce.Library.Core.Services
  summary: Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.
  example: []
  syntax:
    content: public virtual ValueTask DisposeAsync()
    return:
      type: System.Threading.Tasks.ValueTask
      description: A task that represents the asynchronous dispose operation.
    content.vb: Public Overridable Function DisposeAsync() As ValueTask
  overload: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.DisposeAsync*
  implements:
  - System.IAsyncDisposable.DisposeAsync
  nameWithType.vb: UFDataServiceFromContext(Of TContext).DisposeAsync()
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).DisposeAsync()
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.LockAsync
  commentId: M:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.LockAsync
  id: LockAsync
  parent: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  langs:
  - csharp
  - vb
  name: LockAsync()
  nameWithType: UFDataServiceFromContext<TContext>.LockAsync()
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.LockAsync()
  type: Method
  source:
    remote:
      path: UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.Core.git
    id: LockAsync
    path: ../UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
    startLine: 186
  assemblies:
  - UltraForce.Library.Core
  namespace: UltraForce.Library.Core.Services
  summary: >-
    Locks the data service, preventing the updating of underlying data storage with every

    change.
  remarks: >-
    Each call to <xref href="UltraForce.Library.Core.Services.IUFDataService.LockAsync" data-throw-if-not-resolved="false"></xref> must be matched with a call to

    <xref href="UltraForce.Library.Core.Services.IUFDataService.UnlockAsync" data-throw-if-not-resolved="false"></xref> before data is

    saved again.
  example: []
  syntax:
    content: public Task LockAsync()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function LockAsync() As Task
  overload: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.LockAsync*
  implements:
  - UltraForce.Library.Core.Services.IUFDataService.LockAsync
  nameWithType.vb: UFDataServiceFromContext(Of TContext).LockAsync()
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).LockAsync()
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.UnlockAsync
  commentId: M:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.UnlockAsync
  id: UnlockAsync
  parent: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  langs:
  - csharp
  - vb
  name: UnlockAsync()
  nameWithType: UFDataServiceFromContext<TContext>.UnlockAsync()
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.UnlockAsync()
  type: Method
  source:
    remote:
      path: UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.Core.git
    id: UnlockAsync
    path: ../UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
    startLine: 193
  assemblies:
  - UltraForce.Library.Core
  namespace: UltraForce.Library.Core.Services
  summary: >-
    Unlocks the data service. If this call matches the first call to <xref href="UltraForce.Library.Core.Services.IUFDataService.LockAsync" data-throw-if-not-resolved="false"></xref>

    any pending changes are saved.
  example: []
  syntax:
    content: public Task UnlockAsync()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function UnlockAsync() As Task
  overload: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.UnlockAsync*
  implements:
  - UltraForce.Library.Core.Services.IUFDataService.UnlockAsync
  nameWithType.vb: UFDataServiceFromContext(Of TContext).UnlockAsync()
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).UnlockAsync()
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.CachedContext
  commentId: P:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.CachedContext
  id: CachedContext
  parent: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  langs:
  - csharp
  - vb
  name: CachedContext
  nameWithType: UFDataServiceFromContext<TContext>.CachedContext
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.CachedContext
  type: Property
  source:
    remote:
      path: UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.Core.git
    id: CachedContext
    path: ../UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
    startLine: 218
  assemblies:
  - UltraForce.Library.Core
  namespace: UltraForce.Library.Core.Services
  summary: >-
    The context to read cached data. If the instance is disposed, this property will throw an

    exception.
  example: []
  syntax:
    content: protected TContext CachedContext { get; }
    parameters: []
    return:
      type: '{TContext}'
    content.vb: Protected ReadOnly Property CachedContext As TContext
  overload: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.CachedContext*
  nameWithType.vb: UFDataServiceFromContext(Of TContext).CachedContext
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).CachedContext
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.MainContext
  commentId: P:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.MainContext
  id: MainContext
  parent: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  langs:
  - csharp
  - vb
  name: MainContext
  nameWithType: UFDataServiceFromContext<TContext>.MainContext
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.MainContext
  type: Property
  source:
    remote:
      path: UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.Core.git
    id: MainContext
    path: ../UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
    startLine: 235
  assemblies:
  - UltraForce.Library.Core
  namespace: UltraForce.Library.Core.Services
  summary: >-
    The context to perform operation with that changes the database. If the instance is

    disposed, this property will throw an exception. This context should also be used to

    retrieve entities that are about to be changed or removed.
  example: []
  syntax:
    content: protected TContext MainContext { get; }
    parameters: []
    return:
      type: '{TContext}'
    content.vb: Protected ReadOnly Property MainContext As TContext
  overload: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.MainContext*
  nameWithType.vb: UFDataServiceFromContext(Of TContext).MainContext
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).MainContext
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.Changed
  commentId: P:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.Changed
  id: Changed
  parent: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  langs:
  - csharp
  - vb
  name: Changed
  nameWithType: UFDataServiceFromContext<TContext>.Changed
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.Changed
  type: Property
  source:
    remote:
      path: UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.Core.git
    id: Changed
    path: ../UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
    startLine: 251
  assemblies:
  - UltraForce.Library.Core
  namespace: UltraForce.Library.Core.Services
  summary: >-
    This property is true when the data service is locked and there is at least one change

    pending.
  example: []
  syntax:
    content: protected bool Changed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected Property Changed As Boolean
  overload: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.Changed*
  nameWithType.vb: UFDataServiceFromContext(Of TContext).Changed
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).Changed
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.DetachEntity(System.Object)
  commentId: M:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.DetachEntity(System.Object)
  id: DetachEntity(System.Object)
  parent: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  langs:
  - csharp
  - vb
  name: DetachEntity(object)
  nameWithType: UFDataServiceFromContext<TContext>.DetachEntity(object)
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.DetachEntity(object)
  type: Method
  source:
    remote:
      path: UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.Core.git
    id: DetachEntity
    path: ../UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
    startLine: 264
  assemblies:
  - UltraForce.Library.Core
  namespace: UltraForce.Library.Core.Services
  summary: >-
    Stops an entity from being tracked by the entity framework.

    <p>

    This method only detaches the object from  the <xref href="UltraForce.Library.Core.Services.UFDataServiceFromContext%601.MainContext" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: protected void DetachEntity(object entity)
    parameters:
    - id: entity
      type: System.Object
      description: ''
    content.vb: Protected Sub DetachEntity(entity As Object)
  overload: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.DetachEntity*
  nameWithType.vb: UFDataServiceFromContext(Of TContext).DetachEntity(Object)
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).DetachEntity(Object)
  name.vb: DetachEntity(Object)
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.FindForIdAsync``3(``2)
  commentId: M:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.FindForIdAsync``3(``2)
  id: FindForIdAsync``3(``2)
  parent: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  langs:
  - csharp
  - vb
  name: FindForIdAsync<TServiceModel, TEntity, TKey>(TKey)
  nameWithType: UFDataServiceFromContext<TContext>.FindForIdAsync<TServiceModel, TEntity, TKey>(TKey)
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.FindForIdAsync<TServiceModel, TEntity, TKey>(TKey)
  type: Method
  source:
    remote:
      path: UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.Core.git
    id: FindForIdAsync
    path: ../UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
    startLine: 282
  assemblies:
  - UltraForce.Library.Core
  namespace: UltraForce.Library.Core.Services
  summary: >-
    Finds an entity for a certain id and convert it to a service model.

    <p>

    This method will use the <xref href="UltraForce.Library.Core.Services.UFDataServiceFromContext%601.CachedContext" data-throw-if-not-resolved="false"></xref> to find the entity and convert it.

    </p>
  example: []
  syntax:
    content: 'protected Task<TServiceModel?> FindForIdAsync<TServiceModel, TEntity, TKey>(TKey id) where TServiceModel : class, IUFDataServiceModel<TEntity>, new() where TEntity : class, new()'
    parameters:
    - id: id
      type: '{TKey}'
      description: Id to find entity for
    typeParameters:
    - id: TServiceModel
      description: Service model to convert to
    - id: TEntity
      description: Type of entity
    - id: TKey
      description: Type of id
    return:
      type: System.Threading.Tasks.Task{{TServiceModel}}
      description: Service model instance or null if no entity could be found
    content.vb: Protected Function FindForIdAsync(Of TServiceModel As {Class, IUFDataServiceModel(Of TEntity), New}, TEntity As {Class, New}, TKey)(id As TKey) As Task(Of TServiceModel)
  overload: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.FindForIdAsync*
  nameWithType.vb: UFDataServiceFromContext(Of TContext).FindForIdAsync(Of TServiceModel, TEntity, TKey)(TKey)
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).FindForIdAsync(Of TServiceModel, TEntity, TKey)(TKey)
  name.vb: FindForIdAsync(Of TServiceModel, TEntity, TKey)(TKey)
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.FindAllAsync``2
  commentId: M:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.FindAllAsync``2
  id: FindAllAsync``2
  parent: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  langs:
  - csharp
  - vb
  name: FindAllAsync<TServiceModel, TEntity>()
  nameWithType: UFDataServiceFromContext<TContext>.FindAllAsync<TServiceModel, TEntity>()
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.FindAllAsync<TServiceModel, TEntity>()
  type: Method
  source:
    remote:
      path: UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.Core.git
    id: FindAllAsync
    path: ../UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
    startLine: 304
  assemblies:
  - UltraForce.Library.Core
  namespace: UltraForce.Library.Core.Services
  summary: Finds all entities and convert them to a service model.
  example: []
  syntax:
    content: 'protected Task<IEnumerable<TServiceModel>> FindAllAsync<TServiceModel, TEntity>() where TServiceModel : class, IUFDataServiceModel<TEntity>, new() where TEntity : class, new()'
    typeParameters:
    - id: TServiceModel
      description: Service model to convert to
    - id: TEntity
      description: Entity type
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{TServiceModel}}}
      description: List of service model instances
    content.vb: Protected Function FindAllAsync(Of TServiceModel As {Class, IUFDataServiceModel(Of TEntity), New}, TEntity As {Class, New})() As Task(Of IEnumerable(Of TServiceModel))
  overload: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.FindAllAsync*
  nameWithType.vb: UFDataServiceFromContext(Of TContext).FindAllAsync(Of TServiceModel, TEntity)()
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).FindAllAsync(Of TServiceModel, TEntity)()
  name.vb: FindAllAsync(Of TServiceModel, TEntity)()
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.AddAsync``2(``0)
  commentId: M:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.AddAsync``2(``0)
  id: AddAsync``2(``0)
  parent: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  langs:
  - csharp
  - vb
  name: AddAsync<TServiceModel, TEntity>(TServiceModel)
  nameWithType: UFDataServiceFromContext<TContext>.AddAsync<TServiceModel, TEntity>(TServiceModel)
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.AddAsync<TServiceModel, TEntity>(TServiceModel)
  type: Method
  source:
    remote:
      path: UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.Core.git
    id: AddAsync
    path: ../UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
    startLine: 335
  assemblies:
  - UltraForce.Library.Core
  namespace: UltraForce.Library.Core.Services
  summary: >-
    Creates and adds an entity from a service model. Since <code>data</code> might be an immutable

    instance, after adding the entity a new service model instance is created from the added

    entity that might include updated fields (like the id of the entity).
  example: []
  syntax:
    content: 'protected Task<TServiceModel> AddAsync<TServiceModel, TEntity>(TServiceModel data) where TServiceModel : class, IUFDataServiceModel<TEntity>, new() where TEntity : class, new()'
    parameters:
    - id: data
      type: '{TServiceModel}'
      description: Service model instance to add
    typeParameters:
    - id: TServiceModel
      description: Type of service model
    - id: TEntity
      description: Entity to add
    return:
      type: System.Threading.Tasks.Task{{TServiceModel}}
      description: The service model build from the added entity; this is a new instance
    content.vb: Protected Function AddAsync(Of TServiceModel As {Class, IUFDataServiceModel(Of TEntity), New}, TEntity As {Class, New})(data As TServiceModel) As Task(Of TServiceModel)
  overload: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.AddAsync*
  nameWithType.vb: UFDataServiceFromContext(Of TContext).AddAsync(Of TServiceModel, TEntity)(TServiceModel)
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).AddAsync(Of TServiceModel, TEntity)(TServiceModel)
  name.vb: AddAsync(Of TServiceModel, TEntity)(TServiceModel)
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.UpdateAsync``2(``0)
  commentId: M:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.UpdateAsync``2(``0)
  id: UpdateAsync``2(``0)
  parent: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  langs:
  - csharp
  - vb
  name: UpdateAsync<TServiceModel, TEntity>(TServiceModel)
  nameWithType: UFDataServiceFromContext<TContext>.UpdateAsync<TServiceModel, TEntity>(TServiceModel)
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.UpdateAsync<TServiceModel, TEntity>(TServiceModel)
  type: Method
  source:
    remote:
      path: UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.Core.git
    id: UpdateAsync
    path: ../UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
    startLine: 363
  assemblies:
  - UltraForce.Library.Core
  namespace: UltraForce.Library.Core.Services
  summary: >-
    Updates an entity in the database with the data from a service model instance. Since

    <code>data</code> might be immutable, a new service model instance is created after updating the

    entity in the database. The new service model might include updated fields (like a modified

    date/time field).
  example: []
  syntax:
    content: 'protected Task<TServiceModel> UpdateAsync<TServiceModel, TEntity>(TServiceModel data) where TServiceModel : class, IUFDataServiceModel<TEntity>, new() where TEntity : class, new()'
    parameters:
    - id: data
      type: '{TServiceModel}'
      description: Data to update entity with
    typeParameters:
    - id: TServiceModel
      description: Service model type
    - id: TEntity
      description: Entity type
    return:
      type: System.Threading.Tasks.Task{{TServiceModel}}
      description: The service model build from the updated entity; this is a new instance
    content.vb: Protected Function UpdateAsync(Of TServiceModel As {Class, IUFDataServiceModel(Of TEntity), New}, TEntity As {Class, New})(data As TServiceModel) As Task(Of TServiceModel)
  overload: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.UpdateAsync*
  nameWithType.vb: UFDataServiceFromContext(Of TContext).UpdateAsync(Of TServiceModel, TEntity)(TServiceModel)
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).UpdateAsync(Of TServiceModel, TEntity)(TServiceModel)
  name.vb: UpdateAsync(Of TServiceModel, TEntity)(TServiceModel)
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.RemoveAsync``2(``0)
  commentId: M:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.RemoveAsync``2(``0)
  id: RemoveAsync``2(``0)
  parent: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  langs:
  - csharp
  - vb
  name: RemoveAsync<TServiceModel, TEntity>(TServiceModel)
  nameWithType: UFDataServiceFromContext<TContext>.RemoveAsync<TServiceModel, TEntity>(TServiceModel)
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.RemoveAsync<TServiceModel, TEntity>(TServiceModel)
  type: Method
  source:
    remote:
      path: UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.Core.git
    id: RemoveAsync
    path: ../UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
    startLine: 394
  assemblies:
  - UltraForce.Library.Core
  namespace: UltraForce.Library.Core.Services
  summary: >-
    Removes an entity represented by a service model instance.

    <p>

    This method will use the <xref href="UltraForce.Library.Core.Services.UFDataServiceFromContext%601.MainContext" data-throw-if-not-resolved="false"></xref> to get and remove the entity.

    </p>
  example: []
  syntax:
    content: 'protected Task RemoveAsync<TServiceModel, TEntity>(TServiceModel data) where TServiceModel : class, IUFDataServiceModel<TEntity>, new() where TEntity : class, new()'
    parameters:
    - id: data
      type: '{TServiceModel}'
      description: Data that represents an entity
    typeParameters:
    - id: TServiceModel
      description: Service model type
    - id: TEntity
      description: Entity type
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected Function RemoveAsync(Of TServiceModel As {Class, IUFDataServiceModel(Of TEntity), New}, TEntity As {Class, New})(data As TServiceModel) As Task
  overload: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.RemoveAsync*
  nameWithType.vb: UFDataServiceFromContext(Of TContext).RemoveAsync(Of TServiceModel, TEntity)(TServiceModel)
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).RemoveAsync(Of TServiceModel, TEntity)(TServiceModel)
  name.vb: RemoveAsync(Of TServiceModel, TEntity)(TServiceModel)
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.SaveChangesAsync
  commentId: M:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.SaveChangesAsync
  id: SaveChangesAsync
  parent: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  langs:
  - csharp
  - vb
  name: SaveChangesAsync()
  nameWithType: UFDataServiceFromContext<TContext>.SaveChangesAsync()
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.SaveChangesAsync()
  type: Method
  source:
    remote:
      path: UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.Core.git
    id: SaveChangesAsync
    path: ../UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
    startLine: 421
  assemblies:
  - UltraForce.Library.Core
  namespace: UltraForce.Library.Core.Services
  summary: >-
    Saves the changes when the instance is not locked, else set an internal

    flag to indicate data needs to be saved.

    <p>

    If tracking was disabled, this method will also call

    <xref href="UltraForce.Library.Core.Services.UFDataServiceFromContext%601.DetachTrackedEntries" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: protected Task SaveChangesAsync()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected Function SaveChangesAsync() As Task
  overload: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.SaveChangesAsync*
  nameWithType.vb: UFDataServiceFromContext(Of TContext).SaveChangesAsync()
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).SaveChangesAsync()
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.DetachTrackedEntries
  commentId: M:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.DetachTrackedEntries
  id: DetachTrackedEntries
  parent: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  langs:
  - csharp
  - vb
  name: DetachTrackedEntries()
  nameWithType: UFDataServiceFromContext<TContext>.DetachTrackedEntries()
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.DetachTrackedEntries()
  type: Method
  source:
    remote:
      path: UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.Core.git
    id: DetachTrackedEntries
    path: ../UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
    startLine: 450
  assemblies:
  - UltraForce.Library.Core
  namespace: UltraForce.Library.Core.Services
  summary: >-
    Sets the changed entries that have <xref href="Microsoft.EntityFrameworkCore.EntityState.Added" data-throw-if-not-resolved="false"></xref>,

    <xref href="Microsoft.EntityFrameworkCore.EntityState.Modified" data-throw-if-not-resolved="false"></xref> or <xref href="Microsoft.EntityFrameworkCore.EntityState.Deleted" data-throw-if-not-resolved="false"></xref> to

    <xref href="Microsoft.EntityFrameworkCore.EntityState.Detached" data-throw-if-not-resolved="false"></xref>.

    <p>

    This method only detaches the object from the <xref href="UltraForce.Library.Core.Services.UFDataServiceFromContext%601.MainContext" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    Based on code from:

    https://stackoverflow.com/questions/27423059/how-do-i-clear-tracked-entities-in-entity-framework
  example: []
  syntax:
    content: protected void DetachTrackedEntries()
    content.vb: Protected Sub DetachTrackedEntries()
  overload: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.DetachTrackedEntries*
  nameWithType.vb: UFDataServiceFromContext(Of TContext).DetachTrackedEntries()
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).DetachTrackedEntries()
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.TransactionAsync(System.Func{System.Threading.Tasks.Task})
  commentId: M:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.TransactionAsync(System.Func{System.Threading.Tasks.Task})
  id: TransactionAsync(System.Func{System.Threading.Tasks.Task})
  parent: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  langs:
  - csharp
  - vb
  name: TransactionAsync(Func<Task>)
  nameWithType: UFDataServiceFromContext<TContext>.TransactionAsync(Func<Task>)
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.TransactionAsync(System.Func<System.Threading.Tasks.Task>)
  type: Method
  source:
    remote:
      path: UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.Core.git
    id: TransactionAsync
    path: ../UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
    startLine: 478
  assemblies:
  - UltraForce.Library.Core
  namespace: UltraForce.Library.Core.Services
  summary: >-
    Executes an action within a transaction. If a transaction is already active, the action

    just gets executed without using a transaction assuming the commit or rollback is handled

    by other code.
  example: []
  syntax:
    content: protected Task TransactionAsync(Func<Task> action)
    parameters:
    - id: action
      type: System.Func{System.Threading.Tasks.Task}
      description: Action to execute
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected Function TransactionAsync(action As Func(Of Task)) As Task
  overload: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.TransactionAsync*
  nameWithType.vb: UFDataServiceFromContext(Of TContext).TransactionAsync(Func(Of Task))
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).TransactionAsync(System.Func(Of System.Threading.Tasks.Task))
  name.vb: TransactionAsync(Func(Of Task))
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.TransactionAsync``1(System.Func{System.Threading.Tasks.Task{``0}})
  commentId: M:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.TransactionAsync``1(System.Func{System.Threading.Tasks.Task{``0}})
  id: TransactionAsync``1(System.Func{System.Threading.Tasks.Task{``0}})
  parent: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  langs:
  - csharp
  - vb
  name: TransactionAsync<T>(Func<Task<T>>)
  nameWithType: UFDataServiceFromContext<TContext>.TransactionAsync<T>(Func<Task<T>>)
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.TransactionAsync<T>(System.Func<System.Threading.Tasks.Task<T>>)
  type: Method
  source:
    remote:
      path: UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.Core.git
    id: TransactionAsync
    path: ../UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
    startLine: 515
  assemblies:
  - UltraForce.Library.Core
  namespace: UltraForce.Library.Core.Services
  summary: >-
    Executes an action within a transaction. If a transaction is already active, the action just

    gets executed without using a transaction assuming the commit or rollback is handled by

    other code.

    <p>

    This method assumes there will be changes and uses <xref href="UltraForce.Library.Core.Services.UFDataServiceFromContext%601.MainContext" data-throw-if-not-resolved="false"></xref> to create the

    transaction with.

    </p>
  example: []
  syntax:
    content: protected Task<T> TransactionAsync<T>(Func<Task<T>> action)
    parameters:
    - id: action
      type: System.Func{System.Threading.Tasks.Task{{T}}}
      description: Action to execute
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: The result of the action
    content.vb: Protected Function TransactionAsync(Of T)(action As Func(Of Task(Of T))) As Task(Of T)
  overload: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.TransactionAsync*
  nameWithType.vb: UFDataServiceFromContext(Of TContext).TransactionAsync(Of T)(Func(Of Task(Of T)))
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).TransactionAsync(Of T)(System.Func(Of System.Threading.Tasks.Task(Of T)))
  name.vb: TransactionAsync(Of T)(Func(Of Task(Of T)))
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.SwapAsync``2(System.String,System.String,``1,``1,System.String,System.Nullable{System.DateTime})
  commentId: M:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.SwapAsync``2(System.String,System.String,``1,``1,System.String,System.Nullable{System.DateTime})
  id: SwapAsync``2(System.String,System.String,``1,``1,System.String,System.Nullable{System.DateTime})
  parent: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  langs:
  - csharp
  - vb
  name: SwapAsync<TEntity, TKey>(string, string, TKey, TKey, string?, DateTime?)
  nameWithType: UFDataServiceFromContext<TContext>.SwapAsync<TEntity, TKey>(string, string, TKey, TKey, string?, DateTime?)
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.SwapAsync<TEntity, TKey>(string, string, TKey, TKey, string?, System.DateTime?)
  type: Method
  source:
    remote:
      path: UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.Core.git
    id: SwapAsync
    path: ../UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
    startLine: 557
  assemblies:
  - UltraForce.Library.Core
  namespace: UltraForce.Library.Core.Services
  summary: >-
    Swaps values of two records in a table using a single update statement (so that any unique

    index constraint does not generate an error).

    <p>

    Code based on: https://stackoverflow.com/a/8109360/968451

    </p>

    <p>

    The default implementation executes a SQL statement directly, it assumes the database used is

    MSSQL.

    </p>
  example: []
  syntax:
    content: 'protected virtual Task SwapAsync<TEntity, TKey>(string tableName, string columnName, TKey firstId, TKey secondId, string? modifiedName = null, DateTime? modifiedDate = null) where TEntity : class where TKey : notnull'
    parameters:
    - id: tableName
      type: System.String
      description: Name of table
    - id: columnName
      type: System.String
      description: Name of column
    - id: firstId
      type: '{TKey}'
      description: First id to swap value of
    - id: secondId
      type: '{TKey}'
      description: Second id to swap value of
    - id: modifiedName
      type: System.String
      description: When not null, assign <code>modifiedDate</code> to this column
    - id: modifiedDate
      type: System.Nullable{System.DateTime}
      description: When null, use <code>DateTime.UtcNow();</code>
    typeParameters:
    - id: TEntity
      description: Type of the entity record
    - id: TKey
      description: Type of the id values
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected Overridable Function SwapAsync(Of TEntity As Class, TKey)(tableName As String, columnName As String, firstId As TKey, secondId As TKey, modifiedName As String = Nothing, modifiedDate As Date? = Nothing) As Task
  overload: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.SwapAsync*
  nameWithType.vb: UFDataServiceFromContext(Of TContext).SwapAsync(Of TEntity, TKey)(String, String, TKey, TKey, String, Date?)
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).SwapAsync(Of TEntity, TKey)(String, String, TKey, TKey, String, Date?)
  name.vb: SwapAsync(Of TEntity, TKey)(String, String, TKey, TKey, String, Date?)
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.SwapAsync``1(System.String,System.String,``0,``0,System.String,System.Nullable{System.DateTime})
  commentId: M:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.SwapAsync``1(System.String,System.String,``0,``0,System.String,System.Nullable{System.DateTime})
  id: SwapAsync``1(System.String,System.String,``0,``0,System.String,System.Nullable{System.DateTime})
  parent: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  langs:
  - csharp
  - vb
  name: SwapAsync<T>(string, string, T, T, string?, DateTime?)
  nameWithType: UFDataServiceFromContext<TContext>.SwapAsync<T>(string, string, T, T, string?, DateTime?)
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.SwapAsync<T>(string, string, T, T, string?, System.DateTime?)
  type: Method
  source:
    remote:
      path: UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.Core.git
    id: SwapAsync
    path: ../UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
    startLine: 619
  assemblies:
  - UltraForce.Library.Core
  namespace: UltraForce.Library.Core.Services
  summary: >-
    Determine primary key and swap two entities calling <xref href="UltraForce.Library.Core.Services.UFDataServiceFromContext%601.SwapAsync%60%602(System.String%2cSystem.String%2c%60%601%2c%60%601%2cSystem.String%2cSystem.Nullable%7bSystem.DateTime%7d)" data-throw-if-not-resolved="false"></xref>.

    <p>

    After swapping the method will call <xref href="Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.ReloadAsync(System.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref> to reload

    both entities from the database.

    </p>
  example: []
  syntax:
    content: 'protected virtual Task SwapAsync<T>(string tableName, string columnName, T first, T second, string? modifiedName = null, DateTime? modifiedDate = null) where T : class'
    parameters:
    - id: tableName
      type: System.String
      description: Name of table
    - id: columnName
      type: System.String
      description: Name of column
    - id: first
      type: '{T}'
      description: First entity to swap value of
    - id: second
      type: '{T}'
      description: Second entity to swap value of
    - id: modifiedName
      type: System.String
      description: When not null, assign <code>modifiedDate</code> to this column
    - id: modifiedDate
      type: System.Nullable{System.DateTime}
      description: When null, use <code>DateTime.UtcNow();</code>
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected Overridable Function SwapAsync(Of T As Class)(tableName As String, columnName As String, first As T, second As T, modifiedName As String = Nothing, modifiedDate As Date? = Nothing) As Task
  overload: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.SwapAsync*
  nameWithType.vb: UFDataServiceFromContext(Of TContext).SwapAsync(Of T)(String, String, T, T, String, Date?)
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).SwapAsync(Of T)(String, String, T, T, String, Date?)
  name.vb: SwapAsync(Of T)(String, String, T, T, String, Date?)
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.GetPrimaryKeyNameFromEntity``1
  commentId: M:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.GetPrimaryKeyNameFromEntity``1
  id: GetPrimaryKeyNameFromEntity``1
  parent: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  langs:
  - csharp
  - vb
  name: GetPrimaryKeyNameFromEntity<TEntity>()
  nameWithType: UFDataServiceFromContext<TContext>.GetPrimaryKeyNameFromEntity<TEntity>()
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.GetPrimaryKeyNameFromEntity<TEntity>()
  type: Method
  source:
    remote:
      path: UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.Core.git
    id: GetPrimaryKeyNameFromEntity
    path: ../UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
    startLine: 661
  assemblies:
  - UltraForce.Library.Core
  namespace: UltraForce.Library.Core.Services
  summary: >-
    Returns the primary key of an entity

    <p>

    Code based on: https://stackoverflow.com/a/34993637/968451

    </p>

    <p>

    This method will use the <xref href="UltraForce.Library.Core.Services.UFDataServiceFromContext%601.CachedContext" data-throw-if-not-resolved="false"></xref> to get the information.

    </p>
  remarks: Subclasses can override this method to return the key directly for better performance.
  example: []
  syntax:
    content: 'protected virtual string GetPrimaryKeyNameFromEntity<TEntity>() where TEntity : class'
    typeParameters:
    - id: TEntity
      description: Type of the entity
    return:
      type: System.String
      description: primary key name
    content.vb: Protected Overridable Function GetPrimaryKeyNameFromEntity(Of TEntity As Class)() As String
  overload: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.GetPrimaryKeyNameFromEntity*
  nameWithType.vb: UFDataServiceFromContext(Of TContext).GetPrimaryKeyNameFromEntity(Of TEntity)()
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).GetPrimaryKeyNameFromEntity(Of TEntity)()
  name.vb: GetPrimaryKeyNameFromEntity(Of TEntity)()
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.GetPrimaryKeyFromServiceModel``3(``0)
  commentId: M:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.GetPrimaryKeyFromServiceModel``3(``0)
  id: GetPrimaryKeyFromServiceModel``3(``0)
  parent: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  langs:
  - csharp
  - vb
  name: GetPrimaryKeyFromServiceModel<TServiceModel, TEntity, TKey>(TServiceModel)
  nameWithType: UFDataServiceFromContext<TContext>.GetPrimaryKeyFromServiceModel<TServiceModel, TEntity, TKey>(TServiceModel)
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.GetPrimaryKeyFromServiceModel<TServiceModel, TEntity, TKey>(TServiceModel)
  type: Method
  source:
    remote:
      path: UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.Core.git
    id: GetPrimaryKeyFromServiceModel
    path: ../UltraForce.Library.Core/Services/UFDataServiceFromContext.cs
    startLine: 696
  assemblies:
  - UltraForce.Library.Core
  namespace: UltraForce.Library.Core.Services
  summary: >-
    Gets the primary key value from a service model instance. The method assumes the service

    model instance contains a property with the same name as the primary key property in the

    entity.

    <p>

    With the first call the default implementation determines the primary key property in

    <code>serviceData</code>. using the result from

    <xref href="UltraForce.Library.Core.Services.UFDataServiceFromContext%601.GetPrimaryKeyNameFromEntity%60%601" data-throw-if-not-resolved="false"></xref> and caches

    it for future calls.

    </p>
  remarks: Subclasses can override this method to return the key directly for better performance.
  example: []
  syntax:
    content: 'protected virtual TKey GetPrimaryKeyFromServiceModel<TServiceModel, TEntity, TKey>(TServiceModel serviceData) where TEntity : class'
    parameters:
    - id: serviceData
      type: '{TServiceModel}'
      description: ''
    typeParameters:
    - id: TServiceModel
    - id: TEntity
    - id: TKey
    return:
      type: '{TKey}'
      description: ''
    content.vb: Protected Overridable Function GetPrimaryKeyFromServiceModel(Of TServiceModel, TEntity As Class, TKey)(serviceData As TServiceModel) As TKey
  overload: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.GetPrimaryKeyFromServiceModel*
  exceptions:
  - type: System.Data.MissingPrimaryKeyException
    commentId: T:System.Data.MissingPrimaryKeyException
    description: ''
  nameWithType.vb: UFDataServiceFromContext(Of TContext).GetPrimaryKeyFromServiceModel(Of TServiceModel, TEntity, TKey)(TServiceModel)
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).GetPrimaryKeyFromServiceModel(Of TServiceModel, TEntity, TKey)(TServiceModel)
  name.vb: GetPrimaryKeyFromServiceModel(Of TServiceModel, TEntity, TKey)(TServiceModel)
references:
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  commentId: T:UltraForce.Library.Core.Services.UFDataServiceFromContext`1
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html
  name: UFDataServiceFromContext<TContext>
  nameWithType: UFDataServiceFromContext<TContext>
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>
  nameWithType.vb: UFDataServiceFromContext(Of TContext)
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext)
  name.vb: UFDataServiceFromContext(Of TContext)
  spec.csharp:
  - uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
    name: UFDataServiceFromContext
    href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html
  - name: <
  - name: TContext
  - name: '>'
  spec.vb:
  - uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
    name: UFDataServiceFromContext
    href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TContext
  - name: )
- uid: Microsoft.EntityFrameworkCore.DbContext
  commentId: T:Microsoft.EntityFrameworkCore.DbContext
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.dbcontext
  name: DbContext
  nameWithType: DbContext
  fullName: Microsoft.EntityFrameworkCore.DbContext
- uid: Microsoft.EntityFrameworkCore.DbContext.SaveChanges
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.dbcontext.savechanges#microsoft-entityframeworkcore-dbcontext-savechanges
  name: SaveChanges()
  nameWithType: DbContext.SaveChanges()
  fullName: Microsoft.EntityFrameworkCore.DbContext.SaveChanges()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.DbContext.SaveChanges
    name: SaveChanges
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.dbcontext.savechanges#microsoft-entityframeworkcore-dbcontext-savechanges
  - name: (
  - name: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.DbContext.SaveChanges
    name: SaveChanges
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.dbcontext.savechanges#microsoft-entityframeworkcore-dbcontext-savechanges
  - name: (
  - name: )
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.MainContext
  commentId: P:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.MainContext
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_MainContext
  name: MainContext
  nameWithType: UFDataServiceFromContext<TContext>.MainContext
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.MainContext
  nameWithType.vb: UFDataServiceFromContext(Of TContext).MainContext
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).MainContext
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.CachedContext
  commentId: P:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.CachedContext
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_CachedContext
  name: CachedContext
  nameWithType: UFDataServiceFromContext<TContext>.CachedContext
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.CachedContext
  nameWithType.vb: UFDataServiceFromContext(Of TContext).CachedContext
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).CachedContext
- uid: UltraForce.Library.Core.Services.IUFDataService
  commentId: T:UltraForce.Library.Core.Services.IUFDataService
  parent: UltraForce.Library.Core.Services
  href: UltraForce.Library.Core.Services.IUFDataService.html
  name: IUFDataService
  nameWithType: IUFDataService
  fullName: UltraForce.Library.Core.Services.IUFDataService
- uid: UltraForce.Library.Core.Services
  commentId: N:UltraForce.Library.Core.Services
  href: UltraForce.html
  name: UltraForce.Library.Core.Services
  nameWithType: UltraForce.Library.Core.Services
  fullName: UltraForce.Library.Core.Services
  spec.csharp:
  - uid: UltraForce
    name: UltraForce
    href: UltraForce.html
  - name: .
  - uid: UltraForce.Library
    name: Library
    href: UltraForce.Library.html
  - name: .
  - uid: UltraForce.Library.Core
    name: Core
    href: UltraForce.Library.Core.html
  - name: .
  - uid: UltraForce.Library.Core.Services
    name: Services
    href: UltraForce.Library.Core.Services.html
  spec.vb:
  - uid: UltraForce
    name: UltraForce
    href: UltraForce.html
  - name: .
  - uid: UltraForce.Library
    name: Library
    href: UltraForce.Library.html
  - name: .
  - uid: UltraForce.Library.Core
    name: Core
    href: UltraForce.Library.Core.html
  - name: .
  - uid: UltraForce.Library.Core.Services
    name: Services
    href: UltraForce.Library.Core.Services.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.IAsyncDisposable
  commentId: T:System.IAsyncDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable
  name: IAsyncDisposable
  nameWithType: IAsyncDisposable
  fullName: System.IAsyncDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsModelAsync``2
  commentId: M:UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsModelAsync``2(``1)
  parent: UltraForce.Library.Core.Extensions.UFDataServiceExtensions
  definition: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsModelAsync``2(``1)
  href: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.html#UltraForce_Library_Core_Extensions_UFDataServiceExtensions_AsModelAsync__2___1_
  name: AsModelAsync<TServiceModel, UFDataServiceFromContext<TContext>>(UFDataServiceFromContext<TContext>)
  nameWithType: UFDataServiceExtensions.AsModelAsync<TServiceModel, UFDataServiceFromContext<TContext>>(UFDataServiceFromContext<TContext>)
  fullName: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsModelAsync<TServiceModel, UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>>(UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>)
  nameWithType.vb: UFDataServiceExtensions.AsModelAsync(Of TServiceModel, UFDataServiceFromContext(Of TContext))(UFDataServiceFromContext(Of TContext))
  fullName.vb: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsModelAsync(Of TServiceModel, UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext))(UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext))
  name.vb: AsModelAsync(Of TServiceModel, UFDataServiceFromContext(Of TContext))(UFDataServiceFromContext(Of TContext))
  spec.csharp:
  - uid: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsModelAsync``2(UltraForce.Library.Core.Services.UFDataServiceFromContext{`0})
    name: AsModelAsync
    href: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.html#UltraForce_Library_Core_Extensions_UFDataServiceExtensions_AsModelAsync__2___1_
  - name: <
  - name: TServiceModel
  - name: ','
  - name: " "
  - uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
    name: UFDataServiceFromContext
    href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html
  - name: <
  - name: TContext
  - name: '>'
  - name: '>'
  - name: (
  - uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
    name: UFDataServiceFromContext
    href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html
  - name: <
  - name: TContext
  - name: '>'
  - name: )
  spec.vb:
  - uid: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsModelAsync``2(UltraForce.Library.Core.Services.UFDataServiceFromContext{`0})
    name: AsModelAsync
    href: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.html#UltraForce_Library_Core_Extensions_UFDataServiceExtensions_AsModelAsync__2___1_
  - name: (
  - name: Of
  - name: " "
  - name: TServiceModel
  - name: ','
  - name: " "
  - uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
    name: UFDataServiceFromContext
    href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TContext
  - name: )
  - name: )
  - name: (
  - uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
    name: UFDataServiceFromContext
    href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TContext
  - name: )
  - name: )
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsNullableModelAsync``2
  commentId: M:UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsNullableModelAsync``2(``1)
  parent: UltraForce.Library.Core.Extensions.UFDataServiceExtensions
  definition: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsNullableModelAsync``2(``1)
  href: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.html#UltraForce_Library_Core_Extensions_UFDataServiceExtensions_AsNullableModelAsync__2___1_
  name: AsNullableModelAsync<TServiceModel, UFDataServiceFromContext<TContext>>(UFDataServiceFromContext<TContext>)
  nameWithType: UFDataServiceExtensions.AsNullableModelAsync<TServiceModel, UFDataServiceFromContext<TContext>>(UFDataServiceFromContext<TContext>)
  fullName: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsNullableModelAsync<TServiceModel, UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>>(UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>)
  nameWithType.vb: UFDataServiceExtensions.AsNullableModelAsync(Of TServiceModel, UFDataServiceFromContext(Of TContext))(UFDataServiceFromContext(Of TContext))
  fullName.vb: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsNullableModelAsync(Of TServiceModel, UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext))(UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext))
  name.vb: AsNullableModelAsync(Of TServiceModel, UFDataServiceFromContext(Of TContext))(UFDataServiceFromContext(Of TContext))
  spec.csharp:
  - uid: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsNullableModelAsync``2(UltraForce.Library.Core.Services.UFDataServiceFromContext{`0})
    name: AsNullableModelAsync
    href: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.html#UltraForce_Library_Core_Extensions_UFDataServiceExtensions_AsNullableModelAsync__2___1_
  - name: <
  - name: TServiceModel
  - name: ','
  - name: " "
  - uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
    name: UFDataServiceFromContext
    href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html
  - name: <
  - name: TContext
  - name: '>'
  - name: '>'
  - name: (
  - uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
    name: UFDataServiceFromContext
    href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html
  - name: <
  - name: TContext
  - name: '>'
  - name: )
  spec.vb:
  - uid: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsNullableModelAsync``2(UltraForce.Library.Core.Services.UFDataServiceFromContext{`0})
    name: AsNullableModelAsync
    href: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.html#UltraForce_Library_Core_Extensions_UFDataServiceExtensions_AsNullableModelAsync__2___1_
  - name: (
  - name: Of
  - name: " "
  - name: TServiceModel
  - name: ','
  - name: " "
  - uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
    name: UFDataServiceFromContext
    href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TContext
  - name: )
  - name: )
  - name: (
  - uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1
    name: UFDataServiceFromContext
    href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TContext
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsModelAsync``2(``1)
  commentId: M:UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsModelAsync``2(``1)
  href: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.html#UltraForce_Library_Core_Extensions_UFDataServiceExtensions_AsModelAsync__2___1_
  name: AsModelAsync<TServiceModel, TEntity>(TEntity)
  nameWithType: UFDataServiceExtensions.AsModelAsync<TServiceModel, TEntity>(TEntity)
  fullName: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsModelAsync<TServiceModel, TEntity>(TEntity)
  nameWithType.vb: UFDataServiceExtensions.AsModelAsync(Of TServiceModel, TEntity)(TEntity)
  fullName.vb: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsModelAsync(Of TServiceModel, TEntity)(TEntity)
  name.vb: AsModelAsync(Of TServiceModel, TEntity)(TEntity)
  spec.csharp:
  - uid: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsModelAsync``2(``1)
    name: AsModelAsync
    href: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.html#UltraForce_Library_Core_Extensions_UFDataServiceExtensions_AsModelAsync__2___1_
  - name: <
  - name: TServiceModel
  - name: ','
  - name: " "
  - name: TEntity
  - name: '>'
  - name: (
  - name: TEntity
  - name: )
  spec.vb:
  - uid: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsModelAsync``2(``1)
    name: AsModelAsync
    href: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.html#UltraForce_Library_Core_Extensions_UFDataServiceExtensions_AsModelAsync__2___1_
  - name: (
  - name: Of
  - name: " "
  - name: TServiceModel
  - name: ','
  - name: " "
  - name: TEntity
  - name: )
  - name: (
  - name: TEntity
  - name: )
- uid: UltraForce.Library.Core.Extensions.UFDataServiceExtensions
  commentId: T:UltraForce.Library.Core.Extensions.UFDataServiceExtensions
  parent: UltraForce.Library.Core.Extensions
  href: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.html
  name: UFDataServiceExtensions
  nameWithType: UFDataServiceExtensions
  fullName: UltraForce.Library.Core.Extensions.UFDataServiceExtensions
- uid: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsNullableModelAsync``2(``1)
  commentId: M:UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsNullableModelAsync``2(``1)
  href: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.html#UltraForce_Library_Core_Extensions_UFDataServiceExtensions_AsNullableModelAsync__2___1_
  name: AsNullableModelAsync<TServiceModel, TEntity>(TEntity)
  nameWithType: UFDataServiceExtensions.AsNullableModelAsync<TServiceModel, TEntity>(TEntity)
  fullName: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsNullableModelAsync<TServiceModel, TEntity>(TEntity)
  nameWithType.vb: UFDataServiceExtensions.AsNullableModelAsync(Of TServiceModel, TEntity)(TEntity)
  fullName.vb: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsNullableModelAsync(Of TServiceModel, TEntity)(TEntity)
  name.vb: AsNullableModelAsync(Of TServiceModel, TEntity)(TEntity)
  spec.csharp:
  - uid: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsNullableModelAsync``2(``1)
    name: AsNullableModelAsync
    href: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.html#UltraForce_Library_Core_Extensions_UFDataServiceExtensions_AsNullableModelAsync__2___1_
  - name: <
  - name: TServiceModel
  - name: ','
  - name: " "
  - name: TEntity
  - name: '>'
  - name: (
  - name: TEntity
  - name: )
  spec.vb:
  - uid: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.AsNullableModelAsync``2(``1)
    name: AsNullableModelAsync
    href: UltraForce.Library.Core.Extensions.UFDataServiceExtensions.html#UltraForce_Library_Core_Extensions_UFDataServiceExtensions_AsNullableModelAsync__2___1_
  - name: (
  - name: Of
  - name: " "
  - name: TServiceModel
  - name: ','
  - name: " "
  - name: TEntity
  - name: )
  - name: (
  - name: TEntity
  - name: )
- uid: UltraForce.Library.Core.Extensions
  commentId: N:UltraForce.Library.Core.Extensions
  href: UltraForce.html
  name: UltraForce.Library.Core.Extensions
  nameWithType: UltraForce.Library.Core.Extensions
  fullName: UltraForce.Library.Core.Extensions
  spec.csharp:
  - uid: UltraForce
    name: UltraForce
    href: UltraForce.html
  - name: .
  - uid: UltraForce.Library
    name: Library
    href: UltraForce.Library.html
  - name: .
  - uid: UltraForce.Library.Core
    name: Core
    href: UltraForce.Library.Core.html
  - name: .
  - uid: UltraForce.Library.Core.Extensions
    name: Extensions
    href: UltraForce.Library.Core.Extensions.html
  spec.vb:
  - uid: UltraForce
    name: UltraForce
    href: UltraForce.html
  - name: .
  - uid: UltraForce.Library
    name: Library
    href: UltraForce.Library.html
  - name: .
  - uid: UltraForce.Library.Core
    name: Core
    href: UltraForce.Library.Core.html
  - name: .
  - uid: UltraForce.Library.Core.Extensions
    name: Extensions
    href: UltraForce.Library.Core.Extensions.html
- uid: Microsoft.EntityFrameworkCore.DbContext.ChangeTracker
  commentId: P:Microsoft.EntityFrameworkCore.DbContext.ChangeTracker
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.dbcontext.changetracker
  name: ChangeTracker
  nameWithType: DbContext.ChangeTracker
  fullName: Microsoft.EntityFrameworkCore.DbContext.ChangeTracker
- uid: Microsoft.EntityFrameworkCore.EntityState.Detached
  commentId: F:Microsoft.EntityFrameworkCore.EntityState.Detached
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.entitystate#microsoft-entityframeworkcore-entitystate-detached
  name: Detached
  nameWithType: EntityState.Detached
  fullName: Microsoft.EntityFrameworkCore.EntityState.Detached
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.SaveChangesAsync
  commentId: M:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.SaveChangesAsync
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_SaveChangesAsync
  name: SaveChangesAsync()
  nameWithType: UFDataServiceFromContext<TContext>.SaveChangesAsync()
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.SaveChangesAsync()
  nameWithType.vb: UFDataServiceFromContext(Of TContext).SaveChangesAsync()
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).SaveChangesAsync()
  spec.csharp:
  - uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.SaveChangesAsync
    name: SaveChangesAsync
    href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_SaveChangesAsync
  - name: (
  - name: )
  spec.vb:
  - uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.SaveChangesAsync
    name: SaveChangesAsync
    href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_SaveChangesAsync
  - name: (
  - name: )
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.#ctor*
  commentId: Overload:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.#ctor
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1__ctor__0_System_Boolean_
  name: UFDataServiceFromContext
  nameWithType: UFDataServiceFromContext<TContext>.UFDataServiceFromContext
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.UFDataServiceFromContext
  nameWithType.vb: UFDataServiceFromContext(Of TContext).New
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).New
  name.vb: New
- uid: '{TContext}'
  commentId: '!:TContext'
  definition: TContext
  name: TContext
  nameWithType: TContext
  fullName: TContext
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TContext
  name: TContext
  nameWithType: TContext
  fullName: TContext
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.Dispose*
  commentId: Overload:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.Dispose
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_Dispose
  name: Dispose
  nameWithType: UFDataServiceFromContext<TContext>.Dispose
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.Dispose
  nameWithType.vb: UFDataServiceFromContext(Of TContext).Dispose
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.DisposeAsync*
  commentId: Overload:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.DisposeAsync
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_DisposeAsync
  name: DisposeAsync
  nameWithType: UFDataServiceFromContext<TContext>.DisposeAsync
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.DisposeAsync
  nameWithType.vb: UFDataServiceFromContext(Of TContext).DisposeAsync
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).DisposeAsync
- uid: System.IAsyncDisposable.DisposeAsync
  commentId: M:System.IAsyncDisposable.DisposeAsync
  parent: System.IAsyncDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable.disposeasync
  name: DisposeAsync()
  nameWithType: IAsyncDisposable.DisposeAsync()
  fullName: System.IAsyncDisposable.DisposeAsync()
  spec.csharp:
  - uid: System.IAsyncDisposable.DisposeAsync
    name: DisposeAsync
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable.disposeasync
  - name: (
  - name: )
  spec.vb:
  - uid: System.IAsyncDisposable.DisposeAsync
    name: DisposeAsync
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable.disposeasync
  - name: (
  - name: )
- uid: System.Threading.Tasks.ValueTask
  commentId: T:System.Threading.Tasks.ValueTask
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask
  name: ValueTask
  nameWithType: ValueTask
  fullName: System.Threading.Tasks.ValueTask
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: UltraForce.Library.Core.Services.IUFDataService.LockAsync
  commentId: M:UltraForce.Library.Core.Services.IUFDataService.LockAsync
  parent: UltraForce.Library.Core.Services.IUFDataService
  href: UltraForce.Library.Core.Services.IUFDataService.html#UltraForce_Library_Core_Services_IUFDataService_LockAsync
  name: LockAsync()
  nameWithType: IUFDataService.LockAsync()
  fullName: UltraForce.Library.Core.Services.IUFDataService.LockAsync()
  spec.csharp:
  - uid: UltraForce.Library.Core.Services.IUFDataService.LockAsync
    name: LockAsync
    href: UltraForce.Library.Core.Services.IUFDataService.html#UltraForce_Library_Core_Services_IUFDataService_LockAsync
  - name: (
  - name: )
  spec.vb:
  - uid: UltraForce.Library.Core.Services.IUFDataService.LockAsync
    name: LockAsync
    href: UltraForce.Library.Core.Services.IUFDataService.html#UltraForce_Library_Core_Services_IUFDataService_LockAsync
  - name: (
  - name: )
- uid: UltraForce.Library.Core.Services.IUFDataService.UnlockAsync
  commentId: M:UltraForce.Library.Core.Services.IUFDataService.UnlockAsync
  parent: UltraForce.Library.Core.Services.IUFDataService
  href: UltraForce.Library.Core.Services.IUFDataService.html#UltraForce_Library_Core_Services_IUFDataService_UnlockAsync
  name: UnlockAsync()
  nameWithType: IUFDataService.UnlockAsync()
  fullName: UltraForce.Library.Core.Services.IUFDataService.UnlockAsync()
  spec.csharp:
  - uid: UltraForce.Library.Core.Services.IUFDataService.UnlockAsync
    name: UnlockAsync
    href: UltraForce.Library.Core.Services.IUFDataService.html#UltraForce_Library_Core_Services_IUFDataService_UnlockAsync
  - name: (
  - name: )
  spec.vb:
  - uid: UltraForce.Library.Core.Services.IUFDataService.UnlockAsync
    name: UnlockAsync
    href: UltraForce.Library.Core.Services.IUFDataService.html#UltraForce_Library_Core_Services_IUFDataService_UnlockAsync
  - name: (
  - name: )
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.LockAsync*
  commentId: Overload:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.LockAsync
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_LockAsync
  name: LockAsync
  nameWithType: UFDataServiceFromContext<TContext>.LockAsync
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.LockAsync
  nameWithType.vb: UFDataServiceFromContext(Of TContext).LockAsync
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).LockAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.UnlockAsync*
  commentId: Overload:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.UnlockAsync
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_UnlockAsync
  name: UnlockAsync
  nameWithType: UFDataServiceFromContext<TContext>.UnlockAsync
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.UnlockAsync
  nameWithType.vb: UFDataServiceFromContext(Of TContext).UnlockAsync
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).UnlockAsync
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.CachedContext*
  commentId: Overload:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.CachedContext
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_CachedContext
  name: CachedContext
  nameWithType: UFDataServiceFromContext<TContext>.CachedContext
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.CachedContext
  nameWithType.vb: UFDataServiceFromContext(Of TContext).CachedContext
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).CachedContext
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.MainContext*
  commentId: Overload:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.MainContext
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_MainContext
  name: MainContext
  nameWithType: UFDataServiceFromContext<TContext>.MainContext
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.MainContext
  nameWithType.vb: UFDataServiceFromContext(Of TContext).MainContext
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).MainContext
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.Changed*
  commentId: Overload:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.Changed
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_Changed
  name: Changed
  nameWithType: UFDataServiceFromContext<TContext>.Changed
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.Changed
  nameWithType.vb: UFDataServiceFromContext(Of TContext).Changed
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).Changed
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.DetachEntity*
  commentId: Overload:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.DetachEntity
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_DetachEntity_System_Object_
  name: DetachEntity
  nameWithType: UFDataServiceFromContext<TContext>.DetachEntity
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.DetachEntity
  nameWithType.vb: UFDataServiceFromContext(Of TContext).DetachEntity
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).DetachEntity
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.FindForIdAsync*
  commentId: Overload:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.FindForIdAsync
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_FindForIdAsync__3___2_
  name: FindForIdAsync
  nameWithType: UFDataServiceFromContext<TContext>.FindForIdAsync
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.FindForIdAsync
  nameWithType.vb: UFDataServiceFromContext(Of TContext).FindForIdAsync
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).FindForIdAsync
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Threading.Tasks.Task{{TServiceModel}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TServiceModel>
  nameWithType: Task<TServiceModel>
  fullName: System.Threading.Tasks.Task<TServiceModel>
  nameWithType.vb: Task(Of TServiceModel)
  fullName.vb: System.Threading.Tasks.Task(Of TServiceModel)
  name.vb: Task(Of TServiceModel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TServiceModel
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TServiceModel
  - name: )
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.FindAllAsync*
  commentId: Overload:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.FindAllAsync
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_FindAllAsync__2
  name: FindAllAsync
  nameWithType: UFDataServiceFromContext<TContext>.FindAllAsync
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.FindAllAsync
  nameWithType.vb: UFDataServiceFromContext(Of TContext).FindAllAsync
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).FindAllAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{TServiceModel}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IEnumerable<TServiceModel>>
  nameWithType: Task<IEnumerable<TServiceModel>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<TServiceModel>>
  nameWithType.vb: Task(Of IEnumerable(Of TServiceModel))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of TServiceModel))
  name.vb: Task(Of IEnumerable(Of TServiceModel))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TServiceModel
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TServiceModel
  - name: )
  - name: )
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.AddAsync*
  commentId: Overload:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.AddAsync
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_AddAsync__2___0_
  name: AddAsync
  nameWithType: UFDataServiceFromContext<TContext>.AddAsync
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.AddAsync
  nameWithType.vb: UFDataServiceFromContext(Of TContext).AddAsync
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).AddAsync
- uid: '{TServiceModel}'
  commentId: '!:TServiceModel'
  definition: TServiceModel
  name: TServiceModel
  nameWithType: TServiceModel
  fullName: TServiceModel
- uid: TServiceModel
  name: TServiceModel
  nameWithType: TServiceModel
  fullName: TServiceModel
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.UpdateAsync*
  commentId: Overload:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.UpdateAsync
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_UpdateAsync__2___0_
  name: UpdateAsync
  nameWithType: UFDataServiceFromContext<TContext>.UpdateAsync
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.UpdateAsync
  nameWithType.vb: UFDataServiceFromContext(Of TContext).UpdateAsync
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).UpdateAsync
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.RemoveAsync*
  commentId: Overload:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.RemoveAsync
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_RemoveAsync__2___0_
  name: RemoveAsync
  nameWithType: UFDataServiceFromContext<TContext>.RemoveAsync
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.RemoveAsync
  nameWithType.vb: UFDataServiceFromContext(Of TContext).RemoveAsync
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).RemoveAsync
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.DetachTrackedEntries
  commentId: M:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.DetachTrackedEntries
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_DetachTrackedEntries
  name: DetachTrackedEntries()
  nameWithType: UFDataServiceFromContext<TContext>.DetachTrackedEntries()
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.DetachTrackedEntries()
  nameWithType.vb: UFDataServiceFromContext(Of TContext).DetachTrackedEntries()
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).DetachTrackedEntries()
  spec.csharp:
  - uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.DetachTrackedEntries
    name: DetachTrackedEntries
    href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_DetachTrackedEntries
  - name: (
  - name: )
  spec.vb:
  - uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.DetachTrackedEntries
    name: DetachTrackedEntries
    href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_DetachTrackedEntries
  - name: (
  - name: )
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.SaveChangesAsync*
  commentId: Overload:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.SaveChangesAsync
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_SaveChangesAsync
  name: SaveChangesAsync
  nameWithType: UFDataServiceFromContext<TContext>.SaveChangesAsync
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.SaveChangesAsync
  nameWithType.vb: UFDataServiceFromContext(Of TContext).SaveChangesAsync
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).SaveChangesAsync
- uid: Microsoft.EntityFrameworkCore.EntityState.Added
  commentId: F:Microsoft.EntityFrameworkCore.EntityState.Added
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.entitystate#microsoft-entityframeworkcore-entitystate-added
  name: Added
  nameWithType: EntityState.Added
  fullName: Microsoft.EntityFrameworkCore.EntityState.Added
- uid: Microsoft.EntityFrameworkCore.EntityState.Modified
  commentId: F:Microsoft.EntityFrameworkCore.EntityState.Modified
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.entitystate#microsoft-entityframeworkcore-entitystate-modified
  name: Modified
  nameWithType: EntityState.Modified
  fullName: Microsoft.EntityFrameworkCore.EntityState.Modified
- uid: Microsoft.EntityFrameworkCore.EntityState.Deleted
  commentId: F:Microsoft.EntityFrameworkCore.EntityState.Deleted
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.entitystate#microsoft-entityframeworkcore-entitystate-deleted
  name: Deleted
  nameWithType: EntityState.Deleted
  fullName: Microsoft.EntityFrameworkCore.EntityState.Deleted
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.DetachTrackedEntries*
  commentId: Overload:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.DetachTrackedEntries
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_DetachTrackedEntries
  name: DetachTrackedEntries
  nameWithType: UFDataServiceFromContext<TContext>.DetachTrackedEntries
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.DetachTrackedEntries
  nameWithType.vb: UFDataServiceFromContext(Of TContext).DetachTrackedEntries
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).DetachTrackedEntries
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.TransactionAsync*
  commentId: Overload:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.TransactionAsync
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_TransactionAsync_System_Func_System_Threading_Tasks_Task__
  name: TransactionAsync
  nameWithType: UFDataServiceFromContext<TContext>.TransactionAsync
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.TransactionAsync
  nameWithType.vb: UFDataServiceFromContext(Of TContext).TransactionAsync
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).TransactionAsync
- uid: System.Func{System.Threading.Tasks.Task}
  commentId: T:System.Func{System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: System.Func<System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of Task)
  fullName.vb: System.Func(Of System.Threading.Tasks.Task)
  name.vb: Func(Of Task)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  - name: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{System.Threading.Tasks.Task{{T}}}
  commentId: T:System.Func{System.Threading.Tasks.Task{``0}}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<Task<T>>
  nameWithType: Func<Task<T>>
  fullName: System.Func<System.Threading.Tasks.Task<T>>
  nameWithType.vb: Func(Of Task(Of T))
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(Of T))
  name.vb: Func(Of Task(Of T))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.SwapAsync*
  commentId: Overload:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.SwapAsync
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_SwapAsync__2_System_String_System_String___1___1_System_String_System_Nullable_System_DateTime__
  name: SwapAsync
  nameWithType: UFDataServiceFromContext<TContext>.SwapAsync
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.SwapAsync
  nameWithType.vb: UFDataServiceFromContext(Of TContext).SwapAsync
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).SwapAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.datetime
  name: DateTime?
  nameWithType: DateTime?
  fullName: System.DateTime?
  nameWithType.vb: Date?
  fullName.vb: Date?
  name.vb: Date?
  spec.csharp:
  - uid: System.DateTime
    name: DateTime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: '?'
  spec.vb:
  - uid: System.DateTime
    name: Date
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.SwapAsync``2(System.String,System.String,``1,``1,System.String,System.Nullable{System.DateTime})
  commentId: M:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.SwapAsync``2(System.String,System.String,``1,``1,System.String,System.Nullable{System.DateTime})
  isExternal: true
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_SwapAsync__2_System_String_System_String___1___1_System_String_System_Nullable_System_DateTime__
  name: SwapAsync<TEntity, TKey>(string, string, TKey, TKey, string, DateTime?)
  nameWithType: UFDataServiceFromContext<TContext>.SwapAsync<TEntity, TKey>(string, string, TKey, TKey, string, DateTime?)
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.SwapAsync<TEntity, TKey>(string, string, TKey, TKey, string, System.DateTime?)
  nameWithType.vb: UFDataServiceFromContext(Of TContext).SwapAsync(Of TEntity, TKey)(String, String, TKey, TKey, String, Date?)
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).SwapAsync(Of TEntity, TKey)(String, String, TKey, TKey, String, Date?)
  name.vb: SwapAsync(Of TEntity, TKey)(String, String, TKey, TKey, String, Date?)
  spec.csharp:
  - uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.SwapAsync``2(System.String,System.String,``1,``1,System.String,System.Nullable{System.DateTime})
    name: SwapAsync
    href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_SwapAsync__2_System_String_System_String___1___1_System_String_System_Nullable_System_DateTime__
  - name: <
  - name: TEntity
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.DateTime
    name: DateTime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: '?'
  - name: )
  spec.vb:
  - uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.SwapAsync``2(System.String,System.String,``1,``1,System.String,System.Nullable{System.DateTime})
    name: SwapAsync
    href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_SwapAsync__2_System_String_System_String___1___1_System_String_System_Nullable_System_DateTime__
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.DateTime
    name: Date
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: '?'
  - name: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.ReloadAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.ReloadAsync(System.Threading.CancellationToken)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.changetracking.entityentry.reloadasync
  name: ReloadAsync(CancellationToken)
  nameWithType: EntityEntry.ReloadAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.ReloadAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.ReloadAsync(System.Threading.CancellationToken)
    name: ReloadAsync
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.changetracking.entityentry.reloadasync
  - name: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.ReloadAsync(System.Threading.CancellationToken)
    name: ReloadAsync
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.changetracking.entityentry.reloadasync
  - name: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.GetPrimaryKeyNameFromEntity*
  commentId: Overload:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.GetPrimaryKeyNameFromEntity
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_GetPrimaryKeyNameFromEntity__1
  name: GetPrimaryKeyNameFromEntity
  nameWithType: UFDataServiceFromContext<TContext>.GetPrimaryKeyNameFromEntity
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.GetPrimaryKeyNameFromEntity
  nameWithType.vb: UFDataServiceFromContext(Of TContext).GetPrimaryKeyNameFromEntity
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).GetPrimaryKeyNameFromEntity
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.GetPrimaryKeyNameFromEntity``1
  commentId: M:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.GetPrimaryKeyNameFromEntity``1
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_GetPrimaryKeyNameFromEntity__1
  name: GetPrimaryKeyNameFromEntity<TEntity>()
  nameWithType: UFDataServiceFromContext<TContext>.GetPrimaryKeyNameFromEntity<TEntity>()
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.GetPrimaryKeyNameFromEntity<TEntity>()
  nameWithType.vb: UFDataServiceFromContext(Of TContext).GetPrimaryKeyNameFromEntity(Of TEntity)()
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).GetPrimaryKeyNameFromEntity(Of TEntity)()
  name.vb: GetPrimaryKeyNameFromEntity(Of TEntity)()
  spec.csharp:
  - uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.GetPrimaryKeyNameFromEntity``1
    name: GetPrimaryKeyNameFromEntity
    href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_GetPrimaryKeyNameFromEntity__1
  - name: <
  - name: TEntity
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.GetPrimaryKeyNameFromEntity``1
    name: GetPrimaryKeyNameFromEntity
    href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_GetPrimaryKeyNameFromEntity__1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
  - name: (
  - name: )
- uid: System.Data.MissingPrimaryKeyException
  commentId: T:System.Data.MissingPrimaryKeyException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.data.missingprimarykeyexception
  name: MissingPrimaryKeyException
  nameWithType: MissingPrimaryKeyException
  fullName: System.Data.MissingPrimaryKeyException
- uid: UltraForce.Library.Core.Services.UFDataServiceFromContext`1.GetPrimaryKeyFromServiceModel*
  commentId: Overload:UltraForce.Library.Core.Services.UFDataServiceFromContext`1.GetPrimaryKeyFromServiceModel
  href: UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html#UltraForce_Library_Core_Services_UFDataServiceFromContext_1_GetPrimaryKeyFromServiceModel__3___0_
  name: GetPrimaryKeyFromServiceModel
  nameWithType: UFDataServiceFromContext<TContext>.GetPrimaryKeyFromServiceModel
  fullName: UltraForce.Library.Core.Services.UFDataServiceFromContext<TContext>.GetPrimaryKeyFromServiceModel
  nameWithType.vb: UFDataServiceFromContext(Of TContext).GetPrimaryKeyFromServiceModel
  fullName.vb: UltraForce.Library.Core.Services.UFDataServiceFromContext(Of TContext).GetPrimaryKeyFromServiceModel
