{
  "api/UltraForce.Library.Core.Annotations.UFEntityAttribute.html": {
    "href": "api/UltraForce.Library.Core.Annotations.UFEntityAttribute.html",
    "title": "Class UFEntityAttribute | UltraForce.Library.Core",
    "keywords": "Class UFEntityAttribute Namespace UltraForce.Library.Core.Annotations Assembly UltraForce.Library.Core.dll Indicates that a property maps to a property in an entity [AttributeUsage(AttributeTargets.Property)] public sealed class UFEntityAttribute : Attribute Inheritance object Attribute UFEntityAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods UFDataServiceExtensions.AsModelAsync<TServiceModel, TEntity>(TEntity) UFDataServiceExtensions.AsNullableModelAsync<TServiceModel, TEntity>(TEntity?) Constructors UFEntityAttribute() Constructs an instance of UFEntityAttribute with default values. public UFEntityAttribute() UFEntityAttribute(bool) Creates a new instance of UFEntityAttribute using readonly. public UFEntityAttribute(bool aReadOnly) Parameters aReadOnly bool ReadOnly value UFEntityAttribute(string) Creates a new instance of UFEntityAttribute using a name. public UFEntityAttribute(string aName) Parameters aName string Entity name to use UFEntityAttribute(string, bool) Creates a new instance of UFEntityAttribute using a name and readonly. public UFEntityAttribute(string aName, bool aReadOnly) Parameters aName string Entity name to use aReadOnly bool ReadOnly value Properties Name The name of the other property or empty to use the name of the property this attribute is set to. public string Name { get; } Property Value string The other property name. ReadOnly When true the property is not copied to the entity. The property is still copied from the entity. public bool ReadOnly { get; set; } Property Value bool"
  },
  "api/UltraForce.Library.Core.Annotations.UFRequiredIfAttribute.html": {
    "href": "api/UltraForce.Library.Core.Annotations.UFRequiredIfAttribute.html",
    "title": "Class UFRequiredIfAttribute | UltraForce.Library.Core",
    "keywords": "Class UFRequiredIfAttribute Namespace UltraForce.Library.Core.Annotations Assembly UltraForce.Library.Core.dll Provides conditional validation based on related property value. [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public sealed class UFRequiredIfAttribute : ValidationAttribute Inheritance object Attribute ValidationAttribute UFRequiredIfAttribute Inherited Members ValidationAttribute.GetValidationResult(object, ValidationContext) ValidationAttribute.IsValid(object) ValidationAttribute.Validate(object, ValidationContext) ValidationAttribute.Validate(object, string) ValidationAttribute.ErrorMessage ValidationAttribute.ErrorMessageResourceName ValidationAttribute.ErrorMessageResourceType Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods UFDataServiceExtensions.AsModelAsync<TServiceModel, TEntity>(TEntity) UFDataServiceExtensions.AsNullableModelAsync<TServiceModel, TEntity>(TEntity?) Remarks Based on code from: https://stackoverflow.com/questions/26354853/conditionally-required-property-using-data-annotations Constructors UFRequiredIfAttribute(string, object) Creates a new instance of UFRequiredIfAttribute. public UFRequiredIfAttribute(string anOtherProperty, object anOtherPropertyValue) Parameters anOtherProperty string The other property. anOtherPropertyValue object The other property value. Properties IsInverted Gets or sets a value indicating whether other property's value should match or differ from provided other property's value (default is false). public bool IsInverted { get; set; } Property Value bool true if other property's value validation should be inverted; otherwise, false. Remarks How this works true: validated property is required when other property doesn't equal provided value false: validated property is required when other property matches provided value OtherProperty Gets or sets the other property name that will be used during validation. public string OtherProperty { get; } Property Value string The other property name. OtherPropertyDisplayName Gets or sets the display name of the other property. public string OtherPropertyDisplayName { get; set; } Property Value string The display name of the other property. OtherPropertyValue Gets or sets the other property value that will be relevant for validation. public object OtherPropertyValue { get; } Property Value object The other property value. RequiresValidationContext Gets a value that indicates whether the attribute requires validation context. public override bool RequiresValidationContext { get; } Property Value bool true if the attribute requires validation context; otherwise, false. Methods FormatErrorMessage(string) Applies formatting to an error message, based on the data field where the error occurred. public override string FormatErrorMessage(string aName) Parameters aName string The name to include in the formatted message. Returns string An instance of the formatted error message. IsValid(object?, ValidationContext?) Validates the specified value with respect to the current validation attribute. protected override ValidationResult? IsValid(object? aValue, ValidationContext? aValidationContext) Parameters aValue object The value to validate. aValidationContext ValidationContext The context information about the validation operation. Returns ValidationResult An instance of the ValidationResult class."
  },
  "api/UltraForce.Library.Core.Annotations.html": {
    "href": "api/UltraForce.Library.Core.Annotations.html",
    "title": "Namespace UltraForce.Library.Core.Annotations | UltraForce.Library.Core",
    "keywords": "Namespace UltraForce.Library.Core.Annotations Classes UFEntityAttribute Indicates that a property maps to a property in an entity UFRequiredIfAttribute Provides conditional validation based on related property value."
  },
  "api/UltraForce.Library.Core.Converters.UFBoolJsonConverter.html": {
    "href": "api/UltraForce.Library.Core.Converters.UFBoolJsonConverter.html",
    "title": "Class UFBoolJsonConverter | UltraForce.Library.Core",
    "keywords": "Class UFBoolJsonConverter Namespace UltraForce.Library.Core.Converters Assembly UltraForce.Library.Core.dll Converts a bool to 1 or 0 and vice versa. Based on https://stackoverflow.com/a/68073802/968451 public class UFBoolJsonConverter : JsonConverter<bool> Inheritance object JsonConverter JsonConverter<bool> UFBoolJsonConverter Inherited Members JsonConverter<bool>.CanConvert(Type) JsonConverter<bool>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<bool>.WriteAsPropertyName(Utf8JsonWriter, bool, JsonSerializerOptions) JsonConverter<bool>.HandleNull JsonConverter<bool>.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UFDataServiceExtensions.AsModelAsync<TServiceModel, TEntity>(TEntity) UFDataServiceExtensions.AsNullableModelAsync<TServiceModel, TEntity>(TEntity?) Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type bool. public override bool Read(ref Utf8JsonReader aReader, Type aTypeToConvert, JsonSerializerOptions anOptions) Parameters aReader Utf8JsonReader aTypeToConvert Type anOptions JsonSerializerOptions Returns bool The converted value. Write(Utf8JsonWriter, bool, JsonSerializerOptions) Writes a specified value as JSON. public override void Write(Utf8JsonWriter aWriter, bool aValue, JsonSerializerOptions anOptions) Parameters aWriter Utf8JsonWriter aValue bool anOptions JsonSerializerOptions"
  },
  "api/UltraForce.Library.Core.Converters.UFDateOnlyJsonConverter.html": {
    "href": "api/UltraForce.Library.Core.Converters.UFDateOnlyJsonConverter.html",
    "title": "Class UFDateOnlyJsonConverter | UltraForce.Library.Core",
    "keywords": "Class UFDateOnlyJsonConverter Namespace UltraForce.Library.Core.Converters Assembly UltraForce.Library.Core.dll Converts a DateOnly to text and vice versa. The format is yyyy-MM-dd. public class UFDateOnlyJsonConverter : JsonConverter<DateOnly> Inheritance object JsonConverter JsonConverter<DateOnly> UFDateOnlyJsonConverter Inherited Members JsonConverter<DateOnly>.CanConvert(Type) JsonConverter<DateOnly>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<DateOnly>.WriteAsPropertyName(Utf8JsonWriter, DateOnly, JsonSerializerOptions) JsonConverter<DateOnly>.HandleNull JsonConverter<DateOnly>.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UFDataServiceExtensions.AsModelAsync<TServiceModel, TEntity>(TEntity) UFDataServiceExtensions.AsNullableModelAsync<TServiceModel, TEntity>(TEntity?) Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type DateOnly. public override DateOnly Read(ref Utf8JsonReader aReader, Type aTypeToConvert, JsonSerializerOptions anOptions) Parameters aReader Utf8JsonReader aTypeToConvert Type anOptions JsonSerializerOptions Returns DateOnly The converted value. Write(Utf8JsonWriter, DateOnly, JsonSerializerOptions) Writes a specified value as JSON. public override void Write(Utf8JsonWriter aWriter, DateOnly aValue, JsonSerializerOptions anOptions) Parameters aWriter Utf8JsonWriter aValue DateOnly anOptions JsonSerializerOptions"
  },
  "api/UltraForce.Library.Core.Converters.html": {
    "href": "api/UltraForce.Library.Core.Converters.html",
    "title": "Namespace UltraForce.Library.Core.Converters | UltraForce.Library.Core",
    "keywords": "Namespace UltraForce.Library.Core.Converters Classes UFBoolJsonConverter Converts a bool to 1 or 0 and vice versa. Based on https://stackoverflow.com/a/68073802/968451 UFDateOnlyJsonConverter Converts a DateOnly to text and vice versa. The format is yyyy-MM-dd."
  },
  "api/UltraForce.Library.Core.Data.IUFRepository.html": {
    "href": "api/UltraForce.Library.Core.Data.IUFRepository.html",
    "title": "Interface IUFRepository | UltraForce.Library.Core",
    "keywords": "Interface IUFRepository Namespace UltraForce.Library.Core.Data Assembly UltraForce.Library.Core.dll IUFRepository should be used by interface definitions for repository implementations that will inherit from UFRepository<TContext>. public interface IUFRepository Extension Methods UFDataServiceExtensions.AsModelAsync<TServiceModel, TEntity>(TEntity) UFDataServiceExtensions.AsNullableModelAsync<TServiceModel, TEntity>(TEntity?) Methods LockAsync() Locks the repository, preventing the updating of underlying data storage with every change. Task LockAsync() Returns Task Remarks Each call to LockAsync() must be matched with a call to UnlockAsync() before data is saved again. UnlockAsync() Unlocks the repository. If this call matches the first call to LockAsync() any pending changes are saved. Task UnlockAsync() Returns Task"
  },
  "api/UltraForce.Library.Core.Data.UFRepository-1.html": {
    "href": "api/UltraForce.Library.Core.Data.UFRepository-1.html",
    "title": "Class UFRepository<TContext> | UltraForce.Library.Core",
    "keywords": "Class UFRepository<TContext> Namespace UltraForce.Library.Core.Data Assembly UltraForce.Library.Core.dll UFRepository<TContext> is a base class to implement a repository. The class implements a locking mechanism to minimize the SaveChanges() calls. public class UFRepository<TContext> : IUFRepository where TContext : DbContext Type Parameters TContext The database context type Inheritance object UFRepository<TContext> Implements IUFRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UFDataServiceExtensions.AsModelAsync<TServiceModel, TEntity>(TEntity) UFDataServiceExtensions.AsNullableModelAsync<TServiceModel, TEntity>(TEntity?) Remarks Interface definition for the repository should inherit from IUFRepository. See IUFDataService and IUFDataServiceModel<TEntity> for a Constructors UFRepository(TContext, bool) Constructs an instance of UFRepository<TContext>. protected UFRepository(TContext aContext, bool aDisableTracking) Parameters aContext TContext Database context to use aDisableTracking bool When true tell ChangeTracker to stop tracking and reset the state of any tracked entry to Detached with the SaveChangesAsync() call. Properties Changed This property is true when the repository is locked and there is at least one change pending. protected bool Changed { get; } Property Value bool Context The context protected TContext Context { get; } Property Value TContext Methods DetachTrackedEntries() Sets the changed entries that have Added, Modified or Deleted to Detached. protected void DetachTrackedEntries() Remarks Based on code from: https://stackoverflow.com/questions/27423059/how-do-i-clear-tracked-entities-in-entity-framework LockAsync() Locks the repository, preventing the updating of underlying data storage with every change. public Task LockAsync() Returns Task Remarks Each call to LockAsync() must be matched with a call to UnlockAsync() before data is saved again. SaveChangesAsync() Saves the changes when the instance is not locked, else set an internal flag to indicate data needs to be saved. If tracking was disabled, this method will also call DetachTrackedEntries(). protected Task SaveChangesAsync() Returns Task UnlockAsync() Unlocks the repository. If this call matches the first call to LockAsync() any pending changes are saved. public Task UnlockAsync() Returns Task"
  },
  "api/UltraForce.Library.Core.Data.html": {
    "href": "api/UltraForce.Library.Core.Data.html",
    "title": "Namespace UltraForce.Library.Core.Data | UltraForce.Library.Core",
    "keywords": "Namespace UltraForce.Library.Core.Data Classes UFRepository<TContext> UFRepository<TContext> is a base class to implement a repository. The class implements a locking mechanism to minimize the SaveChanges() calls. Interfaces IUFRepository IUFRepository should be used by interface definitions for repository implementations that will inherit from UFRepository<TContext>."
  },
  "api/UltraForce.Library.Core.Extensions.UFDataServiceExtensions.html": {
    "href": "api/UltraForce.Library.Core.Extensions.UFDataServiceExtensions.html",
    "title": "Class UFDataServiceExtensions | UltraForce.Library.Core",
    "keywords": "Class UFDataServiceExtensions Namespace UltraForce.Library.Core.Extensions Assembly UltraForce.Library.Core.dll Defines extension methods in relation to IUFDataService. public static class UFDataServiceExtensions Inheritance object UFDataServiceExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AsModelAsync<TServiceModel, TEntity>(IEnumerable<TEntity>) Uses UFDataServiceTools to convert a list of entities to a list of data service model instances. public static Task<IEnumerable<TServiceModel>> AsModelAsync<TServiceModel, TEntity>(this IEnumerable<TEntity> anEntities) where TServiceModel : class, IUFDataServiceModel<TEntity>, new() where TEntity : class Parameters anEntities IEnumerable<TEntity> Entities to create data service model instances for Returns Task<IEnumerable<TServiceModel>> Data service instances Type Parameters TServiceModel Type of the data service model TEntity Type of the entity AsModelAsync<TServiceModel, TEntity>(Task<TEntity>) Uses BuildFromAsync<TServiceModel, TEntity>(TEntity) to create a data service model from an database entity. public static Task<TServiceModel> AsModelAsync<TServiceModel, TEntity>(this Task<TEntity> anEntity) where TServiceModel : class, IUFDataServiceModel<TEntity>, new() where TEntity : class Parameters anEntity Task<TEntity> Entity to create data service model instance from Returns Task<TServiceModel> Data service instance Type Parameters TServiceModel Type of the data service model TEntity Type of the entity AsModelAsync<TServiceModel, TEntity>(TEntity) Uses BuildFromAsync<TServiceModel, TEntity>(TEntity) to create a data service model from an database entity. public static Task<TServiceModel> AsModelAsync<TServiceModel, TEntity>(this TEntity anEntity) where TServiceModel : class, IUFDataServiceModel<TEntity>, new() where TEntity : class Parameters anEntity TEntity Entity to create data service model instance from Returns Task<TServiceModel> Data service instance Type Parameters TServiceModel Type of the data service model TEntity Type of the entity AsNullableModelAsync<TServiceModel, TEntity>(Task<TEntity?>) Uses BuildNullableFromAsync<TServiceModel, TEntity>(TEntity?) to create a data service model from an database entity. It supports nullable entities. public static Task<TServiceModel?> AsNullableModelAsync<TServiceModel, TEntity>(this Task<TEntity?> anEntity) where TServiceModel : class, IUFDataServiceModel<TEntity>, new() where TEntity : class Parameters anEntity Task<TEntity> Entity to create data service model instance from Returns Task<TServiceModel> Data service instance or null if the entity is null Type Parameters TServiceModel Type of the data service model TEntity Type of the entity AsNullableModelAsync<TServiceModel, TEntity>(ValueTask<TEntity?>) Uses BuildFromAsync<TServiceModel, TEntity>(TEntity) to create a data service model from an database entity. It supports nullable entities. public static Task<TServiceModel?> AsNullableModelAsync<TServiceModel, TEntity>(this ValueTask<TEntity?> anEntity) where TServiceModel : class, IUFDataServiceModel<TEntity>, new() where TEntity : class Parameters anEntity ValueTask<TEntity> Entity to create data service model instance from Returns Task<TServiceModel> Data service instance or null if the entity is null Type Parameters TServiceModel Type of the data service model TEntity Type of the entity AsNullableModelAsync<TServiceModel, TEntity>(TEntity?) Uses BuildFromAsync<TServiceModel, TEntity>(TEntity) to create a data service model from an database entity. It supports nullable entities. public static Task<TServiceModel?> AsNullableModelAsync<TServiceModel, TEntity>(this TEntity? anEntity) where TServiceModel : class, IUFDataServiceModel<TEntity>, new() where TEntity : class Parameters anEntity TEntity Entity to create data service model instance from Returns Task<TServiceModel> Data service instance or null if the entity is null Type Parameters TServiceModel Type of the data service model TEntity Type of the entity"
  },
  "api/UltraForce.Library.Core.Extensions.UFEnumExtensions.html": {
    "href": "api/UltraForce.Library.Core.Extensions.UFEnumExtensions.html",
    "title": "Class UFEnumExtensions | UltraForce.Library.Core",
    "keywords": "Class UFEnumExtensions Namespace UltraForce.Library.Core.Extensions Assembly UltraForce.Library.Core.dll Defines extension method for use with Enum type. public static class UFEnumExtensions Inheritance object UFEnumExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetDisplayDescription(Enum) Get the description value of an enum. Try to get a value from DisplayAttribute, UltraForce.Library.NetStandard.Annotations.UFDescriptionAttribute and DescriptionAttribute. public static string GetDisplayDescription(this Enum anEnumerationValue) Parameters anEnumerationValue Enum Enumeration value. Returns string The value of a description attribute or enum value converted to string. GetDisplayName(Enum) Get the name value of an enum. Try to get a value from DisplayAttribute, UltraForce.Library.NetStandard.Annotations.UFDescriptionAttribute and DisplayNameAttribute. public static string GetDisplayName(this Enum anEnumerationValue) Parameters anEnumerationValue Enum Enumeration value. Returns string The value of a description attribute or enum value converted to string."
  },
  "api/UltraForce.Library.Core.Extensions.html": {
    "href": "api/UltraForce.Library.Core.Extensions.html",
    "title": "Namespace UltraForce.Library.Core.Extensions | UltraForce.Library.Core",
    "keywords": "Namespace UltraForce.Library.Core.Extensions Classes UFDataServiceExtensions Defines extension methods in relation to IUFDataService. UFEnumExtensions Defines extension method for use with Enum type."
  },
  "api/UltraForce.Library.Core.Models.IUFDataServiceModel-1.html": {
    "href": "api/UltraForce.Library.Core.Models.IUFDataServiceModel-1.html",
    "title": "Interface IUFDataServiceModel<TEntity> | UltraForce.Library.Core",
    "keywords": "Interface IUFDataServiceModel<TEntity> Namespace UltraForce.Library.Core.Models Assembly UltraForce.Library.Core.dll A data service model (DTO) that maps to a certain entity public interface IUFDataServiceModel<in TEntity> where TEntity : class Type Parameters TEntity Extension Methods UFDataServiceExtensions.AsModelAsync<TServiceModel, TEntity>(TEntity) UFDataServiceExtensions.AsNullableModelAsync<TServiceModel, TEntity>(TEntity?) Methods CopyFromEntityAsync(TEntity) Updates this instance by copying the properties of an entity. Task CopyFromEntityAsync(TEntity anEntity) Parameters anEntity TEntity Value to copy properties from Returns Task CopyToEntityAsync(TEntity, UFEntityAction) Updates the properties of an entity by copying them from this instance. Task CopyToEntityAsync(TEntity anEntity, UFEntityAction anAction) Parameters anEntity TEntity Value to copy properties to anAction UFEntityAction Action that will be performed with the entity Returns Task"
  },
  "api/UltraForce.Library.Core.Models.UFDataServiceModel-2.html": {
    "href": "api/UltraForce.Library.Core.Models.UFDataServiceModel-2.html",
    "title": "Class UFDataServiceModel<TServiceModel, TEntity> | UltraForce.Library.Core",
    "keywords": "Class UFDataServiceModel<TServiceModel, TEntity> Namespace UltraForce.Library.Core.Models Assembly UltraForce.Library.Core.dll A base class for models in a data service that encapsulates an entity model from a database. The default implementation of the CopyFromEntityAsync(TEntity) and CopyToEntityAsync(TEntity, UFEntityAction) uses reflection and copies all properties of the service model class that have been annotated with UFEntityAttribute. The code caches property info mapping (so for every model type the properties are only scanned once), but for optimal speed subclasses can override the CopyToEntityAsync(TEntity, UFEntityAction) and CopyFromEntityAsync(TEntity) methods to provide a faster implementation. public class UFDataServiceModel<TServiceModel, TEntity> : IUFDataServiceModel<TEntity> where TServiceModel : class, IUFDataServiceModel<TEntity>, new() where TEntity : class Type Parameters TServiceModel Should be set to its own class TEntity an entity model the data service model encapsulates Inheritance object UFDataServiceModel<TServiceModel, TEntity> Implements IUFDataServiceModel<TEntity> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UFDataServiceExtensions.AsModelAsync<TServiceModel, TEntity>(TEntity) UFDataServiceExtensions.AsNullableModelAsync<TServiceModel, TEntity>(TEntity?) Methods CopyFromEntityAsync(TEntity) Updates this instance by copying the properties of an entity. public virtual Task CopyFromEntityAsync(TEntity anEntity) Parameters anEntity TEntity Value to copy properties from Returns Task CopyToEntityAsync(TEntity, UFEntityAction) Updates the properties of an entity by copying them from this instance. public virtual Task CopyToEntityAsync(TEntity anEntity, UFEntityAction anAction) Parameters anEntity TEntity Value to copy properties to anAction UFEntityAction Action that will be performed with the entity Returns Task"
  },
  "api/UltraForce.Library.Core.Models.html": {
    "href": "api/UltraForce.Library.Core.Models.html",
    "title": "Namespace UltraForce.Library.Core.Models | UltraForce.Library.Core",
    "keywords": "Namespace UltraForce.Library.Core.Models Classes UFDataServiceModel<TServiceModel, TEntity> A base class for models in a data service that encapsulates an entity model from a database. The default implementation of the CopyFromEntityAsync(TEntity) and CopyToEntityAsync(TEntity, UFEntityAction) uses reflection and copies all properties of the service model class that have been annotated with UFEntityAttribute. The code caches property info mapping (so for every model type the properties are only scanned once), but for optimal speed subclasses can override the CopyToEntityAsync(TEntity, UFEntityAction) and CopyFromEntityAsync(TEntity) methods to provide a faster implementation. Interfaces IUFDataServiceModel<TEntity> A data service model (DTO) that maps to a certain entity"
  },
  "api/UltraForce.Library.Core.Services.IUFDataService.html": {
    "href": "api/UltraForce.Library.Core.Services.IUFDataService.html",
    "title": "Interface IUFDataService | UltraForce.Library.Core",
    "keywords": "Interface IUFDataService Namespace UltraForce.Library.Core.Services Assembly UltraForce.Library.Core.dll IUFDataService should be used by interface definitions for data service implementations that will inherit from UFDataServiceFromContext<TContext>. public interface IUFDataService Extension Methods UFDataServiceExtensions.AsModelAsync<TServiceModel, TEntity>(TEntity) UFDataServiceExtensions.AsNullableModelAsync<TServiceModel, TEntity>(TEntity?) Methods LockAsync() Locks the data service, preventing the updating of underlying data storage with every change. Task LockAsync() Returns Task Remarks Each call to LockAsync() must be matched with a call to UnlockAsync() before data is saved again. UnlockAsync() Unlocks the data service. If this call matches the first call to LockAsync() any pending changes are saved. Task UnlockAsync() Returns Task"
  },
  "api/UltraForce.Library.Core.Services.IUFDataServiceCRUD-3.html": {
    "href": "api/UltraForce.Library.Core.Services.IUFDataServiceCRUD-3.html",
    "title": "Interface IUFDataServiceCRUD<TServiceModel, TKey, TEntity> | UltraForce.Library.Core",
    "keywords": "Interface IUFDataServiceCRUD<TServiceModel, TKey, TEntity> Namespace UltraForce.Library.Core.Services Assembly UltraForce.Library.Core.dll A definition of data services that offers CRUD methods, assuming the data service maps to a single entity type. public interface IUFDataServiceCRUD<TServiceModel, in TKey, TEntity> : IUFDataService where TServiceModel : IUFDataServiceModel<TEntity>, new() where TEntity : class Type Parameters TServiceModel TKey TEntity Inherited Members IUFDataService.LockAsync() IUFDataService.UnlockAsync() Extension Methods UFDataServiceExtensions.AsModelAsync<TServiceModel, TEntity>(TEntity) UFDataServiceExtensions.AsNullableModelAsync<TServiceModel, TEntity>(TEntity?) Methods AddAsync(TServiceModel) Adds a new record to the data. Task AddAsync(TServiceModel aData) Parameters aData TServiceModel Record to add. Properties within in this value might get updated. Returns Task FindAllAsync() Gets all records. Task<IEnumerable<TServiceModel>> FindAllAsync() Returns Task<IEnumerable<TServiceModel>> a collection of all records FindForIdAsync(TKey) Finds a record instance for a certain id. Task<TServiceModel?> FindForIdAsync(TKey anId) Parameters anId TKey Id to find record for Returns Task<TServiceModel> instance or null when not found RemoveAsync(TServiceModel) Removes a record from the data. Task RemoveAsync(TServiceModel aLocation) Parameters aLocation TServiceModel Record to remove Returns Task UpdateAsync(TServiceModel) Updates the data with an existing record. Task UpdateAsync(TServiceModel aData) Parameters aData TServiceModel Record to update with. Properties within in this value might get updated. Returns Task"
  },
  "api/UltraForce.Library.Core.Services.IUFEmailBuilderService.html": {
    "href": "api/UltraForce.Library.Core.Services.IUFEmailBuilderService.html",
    "title": "Interface IUFEmailBuilderService | UltraForce.Library.Core",
    "keywords": "Interface IUFEmailBuilderService Namespace UltraForce.Library.Core.Services Assembly UltraForce.Library.Core.dll A helper interface to create and send an email. public interface IUFEmailBuilderService Extension Methods UFDataServiceExtensions.AsModelAsync<TServiceModel, TEntity>(TEntity) UFDataServiceExtensions.AsNullableModelAsync<TServiceModel, TEntity>(TEntity?) Methods Attachment(string, string, BinaryData) Adds an attachment. IUFEmailBuilderService Attachment(string aName, string aContentTYpe, BinaryData aData) Parameters aName string aContentTYpe string aData BinaryData Returns IUFEmailBuilderService Attachments(string, IDictionary<string, BinaryData>) Adds attachments of the same content type. IUFEmailBuilderService Attachments(string aContentType, IDictionary<string, BinaryData> anAttachments) Parameters aContentType string anAttachments IDictionary<string, BinaryData> Returns IUFEmailBuilderService Bcc(IDictionary<string, string?>) Adds multiple bcc recipients. IUFEmailBuilderService Bcc(IDictionary<string, string?> aEmailWithNames) Parameters aEmailWithNames IDictionary<string, string> Returns IUFEmailBuilderService Bcc(string, string?) Adds a bcc recipient. IUFEmailBuilderService Bcc(string aToEmail, string? aName = null) Parameters aToEmail string aName string Returns IUFEmailBuilderService Cc(IDictionary<string, string?>) Adds multiple cc recipients. IUFEmailBuilderService Cc(IDictionary<string, string?> aEmailWithNames) Parameters aEmailWithNames IDictionary<string, string> Returns IUFEmailBuilderService Cc(string, string?) Adds a cc recipient. IUFEmailBuilderService Cc(string aToEmail, string? aName = null) Parameters aToEmail string aName string Returns IUFEmailBuilderService From(string, string?) Sets the email sender. IUFEmailBuilderService From(string aFromEmail, string? aName = null) Parameters aFromEmail string aName string Returns IUFEmailBuilderService Html(string) Sets the html content. IUFEmailBuilderService Html(string aContent) Parameters aContent string Returns IUFEmailBuilderService ReplyTo(string, string?) Sets the reply to email. IUFEmailBuilderService ReplyTo(string aReplyToEmail, string? aName = null) Parameters aReplyToEmail string aName string Returns IUFEmailBuilderService SendAsync() Sends the email. Task<string> SendAsync() Returns Task<string> Empty string if email was sent successfully, else an error message. Start() Start a new email, remove any previous stored data. IUFEmailBuilderService Start() Returns IUFEmailBuilderService Subject(string) Sets the email subject. IUFEmailBuilderService Subject(string aSubject) Parameters aSubject string Returns IUFEmailBuilderService Text(string) Sets the text content. IUFEmailBuilderService Text(string aContent) Parameters aContent string Returns IUFEmailBuilderService To(IDictionary<string, string?>) Adds multiple email recipients. IUFEmailBuilderService To(IDictionary<string, string?> aEmailWithNames) Parameters aEmailWithNames IDictionary<string, string> Returns IUFEmailBuilderService To(string, string?) Adds an email recipient. IUFEmailBuilderService To(string aToEmail, string? aName = null) Parameters aToEmail string aName string Returns IUFEmailBuilderService"
  },
  "api/UltraForce.Library.Core.Services.UFAzureEmailBuilderService.html": {
    "href": "api/UltraForce.Library.Core.Services.UFAzureEmailBuilderService.html",
    "title": "Class UFAzureEmailBuilderService | UltraForce.Library.Core",
    "keywords": "Class UFAzureEmailBuilderService Namespace UltraForce.Library.Core.Services Assembly UltraForce.Library.Core.dll An implement of IUFEmailBuilderService using Azure's Email Communication Resource. Subclasses must implement GetConnectionString(). Subclasses can also override GetFromEmail() with an email address set within the communication resource. public abstract class UFAzureEmailBuilderService : UFEmailBuilderService, IUFEmailBuilderService Inheritance object UFEmailBuilderService UFAzureEmailBuilderService Implements IUFEmailBuilderService Inherited Members UFEmailBuilderService.To(IDictionary<string, string>) UFEmailBuilderService.Cc(IDictionary<string, string>) UFEmailBuilderService.Bcc(IDictionary<string, string>) UFEmailBuilderService.Attachments(string, IDictionary<string, BinaryData>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UFDataServiceExtensions.AsModelAsync<TServiceModel, TEntity>(TEntity) UFDataServiceExtensions.AsNullableModelAsync<TServiceModel, TEntity>(TEntity?) Methods Attachment(string, string, BinaryData) Adds an attachment. public override IUFEmailBuilderService Attachment(string aName, string aContentTYpe, BinaryData aData) Parameters aName string aContentTYpe string aData BinaryData Returns IUFEmailBuilderService Bcc(string, string?) Adds a bcc recipient. public override IUFEmailBuilderService Bcc(string aToEmail, string? aName = null) Parameters aToEmail string aName string Returns IUFEmailBuilderService Cc(string, string?) Adds a cc recipient. public override IUFEmailBuilderService Cc(string aToEmail, string? aName = null) Parameters aToEmail string aName string Returns IUFEmailBuilderService From(string, string?) Sets the email sender. public override IUFEmailBuilderService From(string aFromEmail, string? aName = null) Parameters aFromEmail string aName string Returns IUFEmailBuilderService GetConnectionString() Gets the connection string for the email service. protected abstract string GetConnectionString() Returns string GetFromEmail() Returns the email address to use as the sender. Azure does not support names for the from address. protected virtual string GetFromEmail() Returns string Html(string) Sets the html content. public override IUFEmailBuilderService Html(string aContent) Parameters aContent string Returns IUFEmailBuilderService ReplyTo(string, string?) Sets the reply to email. public override IUFEmailBuilderService ReplyTo(string aReplyToEmail, string? aName = null) Parameters aReplyToEmail string aName string Returns IUFEmailBuilderService SendAsync() Sends the email. public override Task<string> SendAsync() Returns Task<string> Empty string if email was sent successfully, else an error message. Start() Start a new email, remove any previous stored data. public override IUFEmailBuilderService Start() Returns IUFEmailBuilderService Subject(string) Sets the email subject. public override IUFEmailBuilderService Subject(string aSubject) Parameters aSubject string Returns IUFEmailBuilderService Text(string) Sets the text content. public override IUFEmailBuilderService Text(string aContent) Parameters aContent string Returns IUFEmailBuilderService To(string, string?) Adds an email recipient. public override IUFEmailBuilderService To(string aToEmail, string? aName = null) Parameters aToEmail string aName string Returns IUFEmailBuilderService"
  },
  "api/UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html": {
    "href": "api/UltraForce.Library.Core.Services.UFDataServiceFromContext-1.html",
    "title": "Class UFDataServiceFromContext<TContext> | UltraForce.Library.Core",
    "keywords": "Class UFDataServiceFromContext<TContext> Namespace UltraForce.Library.Core.Services Assembly UltraForce.Library.Core.dll UFDataServiceFromContext<TContext> is a base class to implement a data service using a DbContext to manage underlying entities. The class implements a locking mechanism to minimize the SaveChanges() calls. public class UFDataServiceFromContext<TContext> : IUFDataService, IDisposable, IAsyncDisposable where TContext : DbContext Type Parameters TContext The database context type Inheritance object UFDataServiceFromContext<TContext> Implements IUFDataService IDisposable IAsyncDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UFDataServiceExtensions.AsModelAsync<TServiceModel, TEntity>(TEntity) UFDataServiceExtensions.AsNullableModelAsync<TServiceModel, TEntity>(TEntity?) Remarks Interface definition for the data service should inherit from IUFDataService. Constructors UFDataServiceFromContext(TContext, bool) Constructs an instance of UFDataServiceFromContext<TContext>. protected UFDataServiceFromContext(TContext aContext, bool aDisableTracking = false) Parameters aContext TContext Database context to use aDisableTracking bool When true tell ChangeTracker to stop tracking and reset the state of any tracked entry to Detached with the SaveChangesAsync() call. To disable tracking everywhere, use {context}.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking; Properties Changed This property is true when the data service is locked and there is at least one change pending. protected bool Changed { get; } Property Value bool Context The context or null if the service has been disposed. protected TContext? Context { get; } Property Value TContext Methods AddAsync<TServiceModel, TEntity>(TServiceModel) Creates and adds an entity from a service model. Then update the service model from the added entity (to update for example generated id values). protected Task<TServiceModel> AddAsync<TServiceModel, TEntity>(TServiceModel aData) where TServiceModel : class, IUFDataServiceModel<TEntity>, new() where TEntity : class, new() Parameters aData TServiceModel Service model instance to add Returns Task<TServiceModel> The value of aData for chaining purposes Type Parameters TServiceModel Type of service model TEntity Entity to add CheckContext() Checks if the context is not null, throws an exception if it is. protected void CheckContext() Exceptions Exception DetachEntity(object) Stops an entity from being tracked by the entity framework. protected void DetachEntity(object anEntity) Parameters anEntity object DetachTrackedEntries() Sets the changed entries that have Added, Modified or Deleted to Detached. protected void DetachTrackedEntries() Remarks Based on code from: https://stackoverflow.com/questions/27423059/how-do-i-clear-tracked-entities-in-entity-framework Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public virtual ValueTask DisposeAsync() Returns ValueTask A task that represents the asynchronous dispose operation. FindAllAsync<TServiceModel, TEntity>() Finds all entities and convert them to a service model. protected Task<IEnumerable<TServiceModel>> FindAllAsync<TServiceModel, TEntity>() where TServiceModel : class, IUFDataServiceModel<TEntity>, new() where TEntity : class, new() Returns Task<IEnumerable<TServiceModel>> List of service model instances Type Parameters TServiceModel Service model to convert to TEntity Entity type FindForIdAsync<TServiceModel, TEntity, TKey>(TKey) Finds a entity for a certain id and convert it to a service model. protected Task<TServiceModel?> FindForIdAsync<TServiceModel, TEntity, TKey>(TKey anId) where TServiceModel : class, IUFDataServiceModel<TEntity>, new() where TEntity : class, new() Parameters anId TKey Id to find entity for Returns Task<TServiceModel> Service model instance or null if no entity could be found Type Parameters TServiceModel Service model to convert to TEntity Type of entity TKey Type of id GetPrimaryKeyFromServiceModel<TServiceModel, TEntity, TKey>(TServiceModel) Gets the primary key value from a service model instance. With the first call the default implementation determines the primary key property in aServiceData using the result from GetPrimaryKeyNameFromEntity<TEntity>() and caches it for future calls. Subclasses can override this method to return the key directly for better performance. protected virtual TKey GetPrimaryKeyFromServiceModel<TServiceModel, TEntity, TKey>(TServiceModel aServiceData) where TEntity : class Parameters aServiceData TServiceModel Returns TKey Type Parameters TServiceModel TEntity TKey Exceptions MissingPrimaryKeyException GetPrimaryKeyNameFromEntity<TEntity>() Returns the primary key of an entity Code based on: https://stackoverflow.com/a/34993637/968451 Subclasses can override this method to return the key directly for better performance. protected virtual string GetPrimaryKeyNameFromEntity<TEntity>() where TEntity : class Returns string primary key name Type Parameters TEntity Type of the entity LockAsync() Locks the data service, preventing the updating of underlying data storage with every change. public Task LockAsync() Returns Task Remarks Each call to LockAsync() must be matched with a call to UnlockAsync() before data is saved again. RemoveAsync<TServiceModel, TEntity>(TServiceModel) Removes an entity represented by a service model instance. protected Task RemoveAsync<TServiceModel, TEntity>(TServiceModel aData) where TServiceModel : class, IUFDataServiceModel<TEntity>, new() where TEntity : class, new() Parameters aData TServiceModel Data that represents an entity Returns Task Type Parameters TServiceModel Service model type TEntity Entity type SaveChangesAsync() Saves the changes when the instance is not locked, else set an internal flag to indicate data needs to be saved. If tracking was disabled, this method will also call DetachTrackedEntries(). protected Task SaveChangesAsync() Returns Task SwapAsync<T>(string, string, T, T, string?) Determine primary key and swap two entities calling SwapAsync<TEntity, TKey>(string, string, TKey, TKey, string?). After swapping the method will call ReloadAsync(CancellationToken) to reload both entities from the database. protected Task SwapAsync<T>(string aTableName, string aColumnName, T aFirst, T aSecond, string? aModifiedName = null) where T : class Parameters aTableName string Name of table aColumnName string Name of column aFirst T First entity to swap value of aSecond T Second entity to swap value of aModifiedName string When non null, assign DateTime.Now to this column Returns Task Type Parameters T SwapAsync<TEntity, TKey>(string, string, TKey, TKey, string?) Swaps values of two records in a table using a single update statement (so that any unique index constraint does not generate an error). Code based on: https://stackoverflow.com/a/8109360/968451 This code creates and executes a SQL statement directly, it assumes the database used is MSSQL. protected Task SwapAsync<TEntity, TKey>(string aTableName, string aColumnName, TKey aFirstId, TKey aSecondId, string? aModifiedName = null) where TEntity : class where TKey : notnull Parameters aTableName string Name of table aColumnName string Name of column aFirstId TKey First id to swap value of aSecondId TKey Second id to swap value of aModifiedName string When non null, assign DateTime.Now to this column Returns Task Type Parameters TEntity Type of the entity record TKey Type of the id values TransactionAsync(Func<Task>) Executes an action within a transaction. If a transaction is already active, the action just gets executed without using a transaction assuming the commit or rollback is handled by other code. protected Task TransactionAsync(Func<Task> anAction) Parameters anAction Func<Task> Action to execute Returns Task TransactionAsync<T>(Func<Task<T>>) Executes an action within a transaction. If a transaction is already active, the action just gets executed without using a transaction assuming the commit or rollback is handled by other code. protected Task<T> TransactionAsync<T>(Func<Task<T>> anAction) Parameters anAction Func<Task<T>> Action to execute Returns Task<T> The result of the action Type Parameters T UnlockAsync() Unlocks the data service. If this call matches the first call to LockAsync() any pending changes are saved. public Task UnlockAsync() Returns Task UpdateAsync<TServiceModel, TEntity>(TServiceModel) Updates an entity in the database with the data from a service model instance. protected Task<TServiceModel> UpdateAsync<TServiceModel, TEntity>(TServiceModel aData) where TServiceModel : class, IUFDataServiceModel<TEntity>, new() where TEntity : class, new() Parameters aData TServiceModel Data to update entity with Returns Task<TServiceModel> The value of aData for chaining purposes Type Parameters TServiceModel Service model type TEntity Entity type"
  },
  "api/UltraForce.Library.Core.Services.UFDummyEmailBuilderService.html": {
    "href": "api/UltraForce.Library.Core.Services.UFDummyEmailBuilderService.html",
    "title": "Class UFDummyEmailBuilderService | UltraForce.Library.Core",
    "keywords": "Class UFDummyEmailBuilderService Namespace UltraForce.Library.Core.Services Assembly UltraForce.Library.Core.dll A dummy implementation of IUFEmailBuilderService that does nothing. public class UFDummyEmailBuilderService : UFEmailBuilderService, IUFEmailBuilderService Inheritance object UFEmailBuilderService UFDummyEmailBuilderService Implements IUFEmailBuilderService Inherited Members UFEmailBuilderService.To(IDictionary<string, string>) UFEmailBuilderService.Cc(IDictionary<string, string>) UFEmailBuilderService.Bcc(IDictionary<string, string>) UFEmailBuilderService.Attachments(string, IDictionary<string, BinaryData>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UFDataServiceExtensions.AsModelAsync<TServiceModel, TEntity>(TEntity) UFDataServiceExtensions.AsNullableModelAsync<TServiceModel, TEntity>(TEntity?) Methods Attachment(string, string, BinaryData) Adds an attachment. public override IUFEmailBuilderService Attachment(string aName, string aContentTYpe, BinaryData aData) Parameters aName string aContentTYpe string aData BinaryData Returns IUFEmailBuilderService Bcc(string, string?) Adds a bcc recipient. public override IUFEmailBuilderService Bcc(string aToEmail, string? aName = null) Parameters aToEmail string aName string Returns IUFEmailBuilderService Cc(string, string?) Adds a cc recipient. public override IUFEmailBuilderService Cc(string aToEmail, string? aName = null) Parameters aToEmail string aName string Returns IUFEmailBuilderService From(string, string?) Sets the email sender. public override IUFEmailBuilderService From(string aFromEmail, string? aName = null) Parameters aFromEmail string aName string Returns IUFEmailBuilderService Html(string) Sets the html content. public override IUFEmailBuilderService Html(string aContent) Parameters aContent string Returns IUFEmailBuilderService ReplyTo(string, string?) Sets the reply to email. public override IUFEmailBuilderService ReplyTo(string aReplyToEmail, string? aName = null) Parameters aReplyToEmail string aName string Returns IUFEmailBuilderService SendAsync() Sends the email. public override Task<string> SendAsync() Returns Task<string> Empty string if email was sent successfully, else an error message. Start() Start a new email, remove any previous stored data. public override IUFEmailBuilderService Start() Returns IUFEmailBuilderService Subject(string) Sets the email subject. public override IUFEmailBuilderService Subject(string aSubject) Parameters aSubject string Returns IUFEmailBuilderService Text(string) Sets the text content. public override IUFEmailBuilderService Text(string aContent) Parameters aContent string Returns IUFEmailBuilderService To(string, string?) Adds an email recipient. public override IUFEmailBuilderService To(string aToEmail, string? aName = null) Parameters aToEmail string aName string Returns IUFEmailBuilderService"
  },
  "api/UltraForce.Library.Core.Services.UFEmailBuilderService.html": {
    "href": "api/UltraForce.Library.Core.Services.UFEmailBuilderService.html",
    "title": "Class UFEmailBuilderService | UltraForce.Library.Core",
    "keywords": "Class UFEmailBuilderService Namespace UltraForce.Library.Core.Services Assembly UltraForce.Library.Core.dll A base implementation of IUFEmailBuilderService. It implements the methods for multiple entries. public abstract class UFEmailBuilderService : IUFEmailBuilderService Inheritance object UFEmailBuilderService Implements IUFEmailBuilderService Derived UFAzureEmailBuilderService UFDummyEmailBuilderService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UFDataServiceExtensions.AsModelAsync<TServiceModel, TEntity>(TEntity) UFDataServiceExtensions.AsNullableModelAsync<TServiceModel, TEntity>(TEntity?) Methods Attachment(string, string, BinaryData) Adds an attachment. public abstract IUFEmailBuilderService Attachment(string aName, string aContentTYpe, BinaryData aData) Parameters aName string aContentTYpe string aData BinaryData Returns IUFEmailBuilderService Attachments(string, IDictionary<string, BinaryData>) Adds attachments of the same content type. public IUFEmailBuilderService Attachments(string aContentType, IDictionary<string, BinaryData> anAttachments) Parameters aContentType string anAttachments IDictionary<string, BinaryData> Returns IUFEmailBuilderService Bcc(IDictionary<string, string?>) Adds multiple bcc recipients. public IUFEmailBuilderService Bcc(IDictionary<string, string?> aEmailWithNames) Parameters aEmailWithNames IDictionary<string, string> Returns IUFEmailBuilderService Bcc(string, string?) Adds a bcc recipient. public abstract IUFEmailBuilderService Bcc(string aToEmail, string? aName = null) Parameters aToEmail string aName string Returns IUFEmailBuilderService Cc(IDictionary<string, string?>) Adds multiple cc recipients. public IUFEmailBuilderService Cc(IDictionary<string, string?> aEmailWithNames) Parameters aEmailWithNames IDictionary<string, string> Returns IUFEmailBuilderService Cc(string, string?) Adds a cc recipient. public abstract IUFEmailBuilderService Cc(string aToEmail, string? aName = null) Parameters aToEmail string aName string Returns IUFEmailBuilderService From(string, string?) Sets the email sender. public abstract IUFEmailBuilderService From(string aFromEmail, string? aName = null) Parameters aFromEmail string aName string Returns IUFEmailBuilderService Html(string) Sets the html content. public abstract IUFEmailBuilderService Html(string aContent) Parameters aContent string Returns IUFEmailBuilderService ReplyTo(string, string?) Sets the reply to email. public abstract IUFEmailBuilderService ReplyTo(string aReplyToEmail, string? aName = null) Parameters aReplyToEmail string aName string Returns IUFEmailBuilderService SendAsync() Sends the email. public abstract Task<string> SendAsync() Returns Task<string> Empty string if email was sent successfully, else an error message. Start() Start a new email, remove any previous stored data. public abstract IUFEmailBuilderService Start() Returns IUFEmailBuilderService Subject(string) Sets the email subject. public abstract IUFEmailBuilderService Subject(string aSubject) Parameters aSubject string Returns IUFEmailBuilderService Text(string) Sets the text content. public abstract IUFEmailBuilderService Text(string aContent) Parameters aContent string Returns IUFEmailBuilderService To(IDictionary<string, string?>) Adds multiple email recipients. public IUFEmailBuilderService To(IDictionary<string, string?> aEmailWithNames) Parameters aEmailWithNames IDictionary<string, string> Returns IUFEmailBuilderService To(string, string?) Adds an email recipient. public abstract IUFEmailBuilderService To(string aToEmail, string? aName = null) Parameters aToEmail string aName string Returns IUFEmailBuilderService"
  },
  "api/UltraForce.Library.Core.Services.html": {
    "href": "api/UltraForce.Library.Core.Services.html",
    "title": "Namespace UltraForce.Library.Core.Services | UltraForce.Library.Core",
    "keywords": "Namespace UltraForce.Library.Core.Services Classes UFAzureEmailBuilderService An implement of IUFEmailBuilderService using Azure's Email Communication Resource. Subclasses must implement GetConnectionString(). Subclasses can also override GetFromEmail() with an email address set within the communication resource. UFDataServiceFromContext<TContext> UFDataServiceFromContext<TContext> is a base class to implement a data service using a DbContext to manage underlying entities. The class implements a locking mechanism to minimize the SaveChanges() calls. UFDummyEmailBuilderService A dummy implementation of IUFEmailBuilderService that does nothing. UFEmailBuilderService A base implementation of IUFEmailBuilderService. It implements the methods for multiple entries. Interfaces IUFDataService IUFDataService should be used by interface definitions for data service implementations that will inherit from UFDataServiceFromContext<TContext>. IUFDataServiceCRUD<TServiceModel, TKey, TEntity> A definition of data services that offers CRUD methods, assuming the data service maps to a single entity type. IUFEmailBuilderService A helper interface to create and send an email."
  },
  "api/UltraForce.Library.Core.Tools.UFCoreFileTools.html": {
    "href": "api/UltraForce.Library.Core.Tools.UFCoreFileTools.html",
    "title": "Class UFCoreFileTools | UltraForce.Library.Core",
    "keywords": "Class UFCoreFileTools Namespace UltraForce.Library.Core.Tools Assembly UltraForce.Library.Core.dll File support methods. public static class UFCoreFileTools Inheritance object UFCoreFileTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckAlternativeFile(string, string, string) Checks if there is an file using an alternative extension, if there is the method will copy the alternative file to missing file. This method uses File.Copy but does not handle any of the exceptions it can throw. public static bool CheckAlternativeFile(string aMissingFileName, string aRequiredExtension, string anAlternativeExtension) Parameters aMissingFileName string Full path and file name aRequiredExtension string The extension the missing filename must use (including '.') anAlternativeExtension string The extension of the alternative file (including '.') Returns bool true if an alternative file was found and a copy was made or if the missing file is actually existing."
  },
  "api/UltraForce.Library.Core.Tools.UFDataServiceTools.html": {
    "href": "api/UltraForce.Library.Core.Tools.UFDataServiceTools.html",
    "title": "Class UFDataServiceTools | UltraForce.Library.Core",
    "keywords": "Class UFDataServiceTools Namespace UltraForce.Library.Core.Tools Assembly UltraForce.Library.Core.dll Support methods for IUFDataServiceModel<TEntity> and IUFDataService public static class UFDataServiceTools Inheritance object UFDataServiceTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BuildFromAsync<TServiceModel, TEntity>(IEnumerable<TEntity>) Creates a list of service model instances from a list of entities. public static Task<IEnumerable<TServiceModel>> BuildFromAsync<TServiceModel, TEntity>(IEnumerable<TEntity> anEntities) where TServiceModel : class, IUFDataServiceModel<TEntity>, new() where TEntity : class Parameters anEntities IEnumerable<TEntity> Entities to create instance for Returns Task<IEnumerable<TServiceModel>> A list of service model instance Type Parameters TServiceModel A class implementing IUFDataServiceModel<TEntity> TEntity The database entity class BuildFromAsync<TServiceModel, TEntity>(TEntity) Creates a service model instance for an entity. public static Task<TServiceModel> BuildFromAsync<TServiceModel, TEntity>(TEntity anEntity) where TServiceModel : class, IUFDataServiceModel<TEntity>, new() where TEntity : class Parameters anEntity TEntity Entity to create instance for Returns Task<TServiceModel> service model instance or null if anEntity was null Type Parameters TServiceModel A class implementing IUFDataServiceModel<TEntity> TEntity The database entity class BuildNullableFromAsync<TServiceModel, TEntity>(TEntity?) Creates a service model instance for an entity. public static Task<TServiceModel?> BuildNullableFromAsync<TServiceModel, TEntity>(TEntity? anEntity) where TServiceModel : class, IUFDataServiceModel<TEntity>, new() where TEntity : class Parameters anEntity TEntity Entity to create instance for Returns Task<TServiceModel> service model instance or null if anEntity was null Type Parameters TServiceModel A class implementing IUFDataServiceModel<TEntity> TEntity The database entity class"
  },
  "api/UltraForce.Library.Core.Tools.UFTestTools.html": {
    "href": "api/UltraForce.Library.Core.Tools.UFTestTools.html",
    "title": "Class UFTestTools | UltraForce.Library.Core",
    "keywords": "Class UFTestTools Namespace UltraForce.Library.Core.Tools Assembly UltraForce.Library.Core.dll THis class contains static methods to support unit testing with xUnit. public static class UFTestTools Inheritance object UFTestTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AssertEqualList<T>(IEnumerable<T>, IEnumerable<T>, IEnumerable<string>?) Checks if a list contains all the items (and not more) of an another list. The method succeeds if the size are equal and all items are found within the list. The method does not look at the order of the items. public static void AssertEqualList<T>(IEnumerable<T> anExpectedList, IEnumerable<T> anActualList, IEnumerable<string>? aNotEqualProperties = null) Parameters anExpectedList IEnumerable<T> anActualList IEnumerable<T> aNotEqualProperties IEnumerable<string> Type Parameters T Exceptions Exception When an item can not be found or lists are not equal in size AssertEqualList<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, bool>) Checks if a list contains all the items (and not more) of another list. The method succeeds if the size are equal and all items are found within the list. public static void AssertEqualList<TFirst, TSecond>(IEnumerable<TFirst> anExpectedList, IEnumerable<TSecond> anActualList, Func<TFirst, TSecond, bool> aComparer) Parameters anExpectedList IEnumerable<TFirst> anActualList IEnumerable<TSecond> aComparer Func<TFirst, TSecond, bool> Type Parameters TFirst TSecond Exceptions Exception When an item can not be found or lists are not equal in size AssertEqualProperties<T>(T, T, IEnumerable<string>?) Checks if all properties are the same. public static void AssertEqualProperties<T>(T anExpected, T anActual, IEnumerable<string>? aNotEqualProperties = null) Parameters anExpected T anActual T aNotEqualProperties IEnumerable<string> Type Parameters T HasUniqueValues<TObject, TValue>(IEnumerable<TObject>, Func<TObject, TValue>) Checks if a list of items has unique values for a certain property. public static void HasUniqueValues<TObject, TValue>(IEnumerable<TObject> aList, Func<TObject, TValue> aGetValue) where TValue : IEquatable<TValue> Parameters aList IEnumerable<TObject> List to check aGetValue Func<TObject, TValue> A function to get the value Type Parameters TObject Object to get value from TValue Value type"
  },
  "api/UltraForce.Library.Core.Tools.html": {
    "href": "api/UltraForce.Library.Core.Tools.html",
    "title": "Namespace UltraForce.Library.Core.Tools | UltraForce.Library.Core",
    "keywords": "Namespace UltraForce.Library.Core.Tools Classes UFCoreFileTools File support methods. UFDataServiceTools Support methods for IUFDataServiceModel<TEntity> and IUFDataService UFTestTools THis class contains static methods to support unit testing with xUnit."
  },
  "api/UltraForce.Library.Core.Types.Enums.UFEntityAction.html": {
    "href": "api/UltraForce.Library.Core.Types.Enums.UFEntityAction.html",
    "title": "Enum UFEntityAction | UltraForce.Library.Core",
    "keywords": "Enum UFEntityAction Namespace UltraForce.Library.Core.Types.Enums Assembly UltraForce.Library.Core.dll Actions on the entity. public enum UFEntityAction Extension Methods UFEnumExtensions.GetDisplayDescription(Enum) UFEnumExtensions.GetDisplayName(Enum) Fields Add = 0 Entity is about to be added Update = 1 Entity is about to be updated"
  },
  "api/UltraForce.Library.Core.Types.Enums.html": {
    "href": "api/UltraForce.Library.Core.Types.Enums.html",
    "title": "Namespace UltraForce.Library.Core.Types.Enums | UltraForce.Library.Core",
    "keywords": "Namespace UltraForce.Library.Core.Types.Enums Enums UFEntityAction Actions on the entity."
  },
  "index.html": {
    "href": "index.html",
    "title": "| UltraForce.Library.Core",
    "keywords": ""
  }
}